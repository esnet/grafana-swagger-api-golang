// Code generated by go-swagger; DO NOT EDIT.

package correlations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// UpdateCorrelationReader is a Reader for the UpdateCorrelation structure.
type UpdateCorrelationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCorrelationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCorrelationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateCorrelationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateCorrelationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateCorrelationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCorrelationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateCorrelationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateCorrelationOK creates a UpdateCorrelationOK with default headers values
func NewUpdateCorrelationOK() *UpdateCorrelationOK {
	return &UpdateCorrelationOK{}
}

/*
UpdateCorrelationOK describes a response with status code 200, with default header values.

(empty)
*/
type UpdateCorrelationOK struct {
	Payload *models.UpdateCorrelationResponseBody
}

func (o *UpdateCorrelationOK) Error() string {
	return fmt.Sprintf("[PATCH /datasources/uid/{sourceUID}/correlations/{correlationUID}][%d] updateCorrelationOK  %+v", 200, o.Payload)
}
func (o *UpdateCorrelationOK) GetPayload() *models.UpdateCorrelationResponseBody {
	return o.Payload
}

func (o *UpdateCorrelationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateCorrelationResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCorrelationBadRequest creates a UpdateCorrelationBadRequest with default headers values
func NewUpdateCorrelationBadRequest() *UpdateCorrelationBadRequest {
	return &UpdateCorrelationBadRequest{}
}

/*
UpdateCorrelationBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type UpdateCorrelationBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateCorrelationBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /datasources/uid/{sourceUID}/correlations/{correlationUID}][%d] updateCorrelationBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateCorrelationBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateCorrelationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCorrelationUnauthorized creates a UpdateCorrelationUnauthorized with default headers values
func NewUpdateCorrelationUnauthorized() *UpdateCorrelationUnauthorized {
	return &UpdateCorrelationUnauthorized{}
}

/*
UpdateCorrelationUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type UpdateCorrelationUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateCorrelationUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /datasources/uid/{sourceUID}/correlations/{correlationUID}][%d] updateCorrelationUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateCorrelationUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateCorrelationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCorrelationForbidden creates a UpdateCorrelationForbidden with default headers values
func NewUpdateCorrelationForbidden() *UpdateCorrelationForbidden {
	return &UpdateCorrelationForbidden{}
}

/*
UpdateCorrelationForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type UpdateCorrelationForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateCorrelationForbidden) Error() string {
	return fmt.Sprintf("[PATCH /datasources/uid/{sourceUID}/correlations/{correlationUID}][%d] updateCorrelationForbidden  %+v", 403, o.Payload)
}
func (o *UpdateCorrelationForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateCorrelationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCorrelationNotFound creates a UpdateCorrelationNotFound with default headers values
func NewUpdateCorrelationNotFound() *UpdateCorrelationNotFound {
	return &UpdateCorrelationNotFound{}
}

/*
UpdateCorrelationNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type UpdateCorrelationNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateCorrelationNotFound) Error() string {
	return fmt.Sprintf("[PATCH /datasources/uid/{sourceUID}/correlations/{correlationUID}][%d] updateCorrelationNotFound  %+v", 404, o.Payload)
}
func (o *UpdateCorrelationNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateCorrelationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCorrelationInternalServerError creates a UpdateCorrelationInternalServerError with default headers values
func NewUpdateCorrelationInternalServerError() *UpdateCorrelationInternalServerError {
	return &UpdateCorrelationInternalServerError{}
}

/*
UpdateCorrelationInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type UpdateCorrelationInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateCorrelationInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /datasources/uid/{sourceUID}/correlations/{correlationUID}][%d] updateCorrelationInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateCorrelationInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateCorrelationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
