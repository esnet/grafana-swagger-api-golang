// Code generated by go-swagger; DO NOT EDIT.

package licensing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// DeleteLicenseTokenReader is a Reader for the DeleteLicenseToken structure.
type DeleteLicenseTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteLicenseTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewDeleteLicenseTokenAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteLicenseTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteLicenseTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteLicenseTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewDeleteLicenseTokenUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteLicenseTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteLicenseTokenAccepted creates a DeleteLicenseTokenAccepted with default headers values
func NewDeleteLicenseTokenAccepted() *DeleteLicenseTokenAccepted {
	return &DeleteLicenseTokenAccepted{}
}

/*
DeleteLicenseTokenAccepted describes a response with status code 202, with default header values.

AcceptedResponse
*/
type DeleteLicenseTokenAccepted struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteLicenseTokenAccepted) Error() string {
	return fmt.Sprintf("[DELETE /licensing/token][%d] deleteLicenseTokenAccepted  %+v", 202, o.Payload)
}
func (o *DeleteLicenseTokenAccepted) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteLicenseTokenAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLicenseTokenBadRequest creates a DeleteLicenseTokenBadRequest with default headers values
func NewDeleteLicenseTokenBadRequest() *DeleteLicenseTokenBadRequest {
	return &DeleteLicenseTokenBadRequest{}
}

/*
DeleteLicenseTokenBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type DeleteLicenseTokenBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteLicenseTokenBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /licensing/token][%d] deleteLicenseTokenBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteLicenseTokenBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteLicenseTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLicenseTokenUnauthorized creates a DeleteLicenseTokenUnauthorized with default headers values
func NewDeleteLicenseTokenUnauthorized() *DeleteLicenseTokenUnauthorized {
	return &DeleteLicenseTokenUnauthorized{}
}

/*
DeleteLicenseTokenUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type DeleteLicenseTokenUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteLicenseTokenUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /licensing/token][%d] deleteLicenseTokenUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteLicenseTokenUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteLicenseTokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLicenseTokenForbidden creates a DeleteLicenseTokenForbidden with default headers values
func NewDeleteLicenseTokenForbidden() *DeleteLicenseTokenForbidden {
	return &DeleteLicenseTokenForbidden{}
}

/*
DeleteLicenseTokenForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type DeleteLicenseTokenForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteLicenseTokenForbidden) Error() string {
	return fmt.Sprintf("[DELETE /licensing/token][%d] deleteLicenseTokenForbidden  %+v", 403, o.Payload)
}
func (o *DeleteLicenseTokenForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteLicenseTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLicenseTokenUnprocessableEntity creates a DeleteLicenseTokenUnprocessableEntity with default headers values
func NewDeleteLicenseTokenUnprocessableEntity() *DeleteLicenseTokenUnprocessableEntity {
	return &DeleteLicenseTokenUnprocessableEntity{}
}

/*
DeleteLicenseTokenUnprocessableEntity describes a response with status code 422, with default header values.

UnprocessableEntityError
*/
type DeleteLicenseTokenUnprocessableEntity struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteLicenseTokenUnprocessableEntity) Error() string {
	return fmt.Sprintf("[DELETE /licensing/token][%d] deleteLicenseTokenUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *DeleteLicenseTokenUnprocessableEntity) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteLicenseTokenUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteLicenseTokenInternalServerError creates a DeleteLicenseTokenInternalServerError with default headers values
func NewDeleteLicenseTokenInternalServerError() *DeleteLicenseTokenInternalServerError {
	return &DeleteLicenseTokenInternalServerError{}
}

/*
DeleteLicenseTokenInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type DeleteLicenseTokenInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteLicenseTokenInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /licensing/token][%d] deleteLicenseTokenInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteLicenseTokenInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteLicenseTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
