// Code generated by go-swagger; DO NOT EDIT.

package licensing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// PostRenewLicenseTokenReader is a Reader for the PostRenewLicenseToken structure.
type PostRenewLicenseTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostRenewLicenseTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostRenewLicenseTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostRenewLicenseTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostRenewLicenseTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostRenewLicenseTokenOK creates a PostRenewLicenseTokenOK with default headers values
func NewPostRenewLicenseTokenOK() *PostRenewLicenseTokenOK {
	return &PostRenewLicenseTokenOK{}
}

/*
PostRenewLicenseTokenOK describes a response with status code 200, with default header values.

(empty)
*/
type PostRenewLicenseTokenOK struct {
}

func (o *PostRenewLicenseTokenOK) Error() string {
	return fmt.Sprintf("[POST /licensing/token/renew][%d] postRenewLicenseTokenOK ", 200)
}

func (o *PostRenewLicenseTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPostRenewLicenseTokenUnauthorized creates a PostRenewLicenseTokenUnauthorized with default headers values
func NewPostRenewLicenseTokenUnauthorized() *PostRenewLicenseTokenUnauthorized {
	return &PostRenewLicenseTokenUnauthorized{}
}

/*
PostRenewLicenseTokenUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type PostRenewLicenseTokenUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *PostRenewLicenseTokenUnauthorized) Error() string {
	return fmt.Sprintf("[POST /licensing/token/renew][%d] postRenewLicenseTokenUnauthorized  %+v", 401, o.Payload)
}
func (o *PostRenewLicenseTokenUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PostRenewLicenseTokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostRenewLicenseTokenNotFound creates a PostRenewLicenseTokenNotFound with default headers values
func NewPostRenewLicenseTokenNotFound() *PostRenewLicenseTokenNotFound {
	return &PostRenewLicenseTokenNotFound{}
}

/*
PostRenewLicenseTokenNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type PostRenewLicenseTokenNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *PostRenewLicenseTokenNotFound) Error() string {
	return fmt.Sprintf("[POST /licensing/token/renew][%d] postRenewLicenseTokenNotFound  %+v", 404, o.Payload)
}
func (o *PostRenewLicenseTokenNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PostRenewLicenseTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
