// Code generated by go-swagger; DO NOT EDIT.

package query_history

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// DeleteQueryReader is a Reader for the DeleteQuery structure.
type DeleteQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteQueryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteQueryOK creates a DeleteQueryOK with default headers values
func NewDeleteQueryOK() *DeleteQueryOK {
	return &DeleteQueryOK{}
}

/*
DeleteQueryOK describes a response with status code 200, with default header values.

(empty)
*/
type DeleteQueryOK struct {
	Payload *models.QueryHistoryDeleteQueryResponse
}

func (o *DeleteQueryOK) Error() string {
	return fmt.Sprintf("[DELETE /query-history/{query_history_uid}][%d] deleteQueryOK  %+v", 200, o.Payload)
}
func (o *DeleteQueryOK) GetPayload() *models.QueryHistoryDeleteQueryResponse {
	return o.Payload
}

func (o *DeleteQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.QueryHistoryDeleteQueryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQueryUnauthorized creates a DeleteQueryUnauthorized with default headers values
func NewDeleteQueryUnauthorized() *DeleteQueryUnauthorized {
	return &DeleteQueryUnauthorized{}
}

/*
DeleteQueryUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type DeleteQueryUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteQueryUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /query-history/{query_history_uid}][%d] deleteQueryUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteQueryUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteQueryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteQueryInternalServerError creates a DeleteQueryInternalServerError with default headers values
func NewDeleteQueryInternalServerError() *DeleteQueryInternalServerError {
	return &DeleteQueryInternalServerError{}
}

/*
DeleteQueryInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type DeleteQueryInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteQueryInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /query-history/{query_history_uid}][%d] deleteQueryInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteQueryInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
