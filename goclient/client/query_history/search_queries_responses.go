// Code generated by go-swagger; DO NOT EDIT.

package query_history

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// SearchQueriesReader is a Reader for the SearchQueries structure.
type SearchQueriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchQueriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchQueriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSearchQueriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchQueriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchQueriesOK creates a SearchQueriesOK with default headers values
func NewSearchQueriesOK() *SearchQueriesOK {
	return &SearchQueriesOK{}
}

/*
SearchQueriesOK describes a response with status code 200, with default header values.

(empty)
*/
type SearchQueriesOK struct {
	Payload *models.QueryHistorySearchResponse
}

func (o *SearchQueriesOK) Error() string {
	return fmt.Sprintf("[GET /query-history][%d] searchQueriesOK  %+v", 200, o.Payload)
}
func (o *SearchQueriesOK) GetPayload() *models.QueryHistorySearchResponse {
	return o.Payload
}

func (o *SearchQueriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.QueryHistorySearchResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchQueriesUnauthorized creates a SearchQueriesUnauthorized with default headers values
func NewSearchQueriesUnauthorized() *SearchQueriesUnauthorized {
	return &SearchQueriesUnauthorized{}
}

/*
SearchQueriesUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type SearchQueriesUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *SearchQueriesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /query-history][%d] searchQueriesUnauthorized  %+v", 401, o.Payload)
}
func (o *SearchQueriesUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *SearchQueriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchQueriesInternalServerError creates a SearchQueriesInternalServerError with default headers values
func NewSearchQueriesInternalServerError() *SearchQueriesInternalServerError {
	return &SearchQueriesInternalServerError{}
}

/*
SearchQueriesInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type SearchQueriesInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *SearchQueriesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /query-history][%d] searchQueriesInternalServerError  %+v", 500, o.Payload)
}
func (o *SearchQueriesInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *SearchQueriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
