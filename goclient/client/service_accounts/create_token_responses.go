// Code generated by go-swagger; DO NOT EDIT.

package service_accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// CreateTokenReader is a Reader for the CreateToken structure.
type CreateTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateTokenConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateTokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateTokenOK creates a CreateTokenOK with default headers values
func NewCreateTokenOK() *CreateTokenOK {
	return &CreateTokenOK{}
}

/*
CreateTokenOK describes a response with status code 200, with default header values.

(empty)
*/
type CreateTokenOK struct {
	Payload *models.NewAPIKeyResult
}

func (o *CreateTokenOK) Error() string {
	return fmt.Sprintf("[POST /serviceaccounts/{serviceAccountId}/tokens][%d] createTokenOK  %+v", 200, o.Payload)
}
func (o *CreateTokenOK) GetPayload() *models.NewAPIKeyResult {
	return o.Payload
}

func (o *CreateTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NewAPIKeyResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTokenBadRequest creates a CreateTokenBadRequest with default headers values
func NewCreateTokenBadRequest() *CreateTokenBadRequest {
	return &CreateTokenBadRequest{}
}

/*
CreateTokenBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type CreateTokenBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *CreateTokenBadRequest) Error() string {
	return fmt.Sprintf("[POST /serviceaccounts/{serviceAccountId}/tokens][%d] createTokenBadRequest  %+v", 400, o.Payload)
}
func (o *CreateTokenBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *CreateTokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTokenUnauthorized creates a CreateTokenUnauthorized with default headers values
func NewCreateTokenUnauthorized() *CreateTokenUnauthorized {
	return &CreateTokenUnauthorized{}
}

/*
CreateTokenUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type CreateTokenUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *CreateTokenUnauthorized) Error() string {
	return fmt.Sprintf("[POST /serviceaccounts/{serviceAccountId}/tokens][%d] createTokenUnauthorized  %+v", 401, o.Payload)
}
func (o *CreateTokenUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *CreateTokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTokenForbidden creates a CreateTokenForbidden with default headers values
func NewCreateTokenForbidden() *CreateTokenForbidden {
	return &CreateTokenForbidden{}
}

/*
CreateTokenForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type CreateTokenForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *CreateTokenForbidden) Error() string {
	return fmt.Sprintf("[POST /serviceaccounts/{serviceAccountId}/tokens][%d] createTokenForbidden  %+v", 403, o.Payload)
}
func (o *CreateTokenForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *CreateTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTokenNotFound creates a CreateTokenNotFound with default headers values
func NewCreateTokenNotFound() *CreateTokenNotFound {
	return &CreateTokenNotFound{}
}

/*
CreateTokenNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type CreateTokenNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *CreateTokenNotFound) Error() string {
	return fmt.Sprintf("[POST /serviceaccounts/{serviceAccountId}/tokens][%d] createTokenNotFound  %+v", 404, o.Payload)
}
func (o *CreateTokenNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *CreateTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTokenConflict creates a CreateTokenConflict with default headers values
func NewCreateTokenConflict() *CreateTokenConflict {
	return &CreateTokenConflict{}
}

/*
CreateTokenConflict describes a response with status code 409, with default header values.

ConflictError
*/
type CreateTokenConflict struct {
	Payload *models.ErrorResponseBody
}

func (o *CreateTokenConflict) Error() string {
	return fmt.Sprintf("[POST /serviceaccounts/{serviceAccountId}/tokens][%d] createTokenConflict  %+v", 409, o.Payload)
}
func (o *CreateTokenConflict) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *CreateTokenConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTokenInternalServerError creates a CreateTokenInternalServerError with default headers values
func NewCreateTokenInternalServerError() *CreateTokenInternalServerError {
	return &CreateTokenInternalServerError{}
}

/*
CreateTokenInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type CreateTokenInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *CreateTokenInternalServerError) Error() string {
	return fmt.Sprintf("[POST /serviceaccounts/{serviceAccountId}/tokens][%d] createTokenInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateTokenInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *CreateTokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
