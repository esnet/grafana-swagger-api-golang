// Code generated by go-swagger; DO NOT EDIT.

package ds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// QueryMetricsWithExpressionsReader is a Reader for the QueryMetricsWithExpressions structure.
type QueryMetricsWithExpressionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryMetricsWithExpressionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryMetricsWithExpressionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 207:
		result := NewQueryMetricsWithExpressionsMultiStatus()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryMetricsWithExpressionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewQueryMetricsWithExpressionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryMetricsWithExpressionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryMetricsWithExpressionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewQueryMetricsWithExpressionsOK creates a QueryMetricsWithExpressionsOK with default headers values
func NewQueryMetricsWithExpressionsOK() *QueryMetricsWithExpressionsOK {
	return &QueryMetricsWithExpressionsOK{}
}

/*
QueryMetricsWithExpressionsOK describes a response with status code 200, with default header values.

(empty)
*/
type QueryMetricsWithExpressionsOK struct {
	Payload *models.QueryDataResponse
}

func (o *QueryMetricsWithExpressionsOK) Error() string {
	return fmt.Sprintf("[POST /ds/query][%d] queryMetricsWithExpressionsOK  %+v", 200, o.Payload)
}
func (o *QueryMetricsWithExpressionsOK) GetPayload() *models.QueryDataResponse {
	return o.Payload
}

func (o *QueryMetricsWithExpressionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.QueryDataResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryMetricsWithExpressionsMultiStatus creates a QueryMetricsWithExpressionsMultiStatus with default headers values
func NewQueryMetricsWithExpressionsMultiStatus() *QueryMetricsWithExpressionsMultiStatus {
	return &QueryMetricsWithExpressionsMultiStatus{}
}

/*
QueryMetricsWithExpressionsMultiStatus describes a response with status code 207, with default header values.

(empty)
*/
type QueryMetricsWithExpressionsMultiStatus struct {
	Payload *models.QueryDataResponse
}

func (o *QueryMetricsWithExpressionsMultiStatus) Error() string {
	return fmt.Sprintf("[POST /ds/query][%d] queryMetricsWithExpressionsMultiStatus  %+v", 207, o.Payload)
}
func (o *QueryMetricsWithExpressionsMultiStatus) GetPayload() *models.QueryDataResponse {
	return o.Payload
}

func (o *QueryMetricsWithExpressionsMultiStatus) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.QueryDataResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryMetricsWithExpressionsBadRequest creates a QueryMetricsWithExpressionsBadRequest with default headers values
func NewQueryMetricsWithExpressionsBadRequest() *QueryMetricsWithExpressionsBadRequest {
	return &QueryMetricsWithExpressionsBadRequest{}
}

/*
QueryMetricsWithExpressionsBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type QueryMetricsWithExpressionsBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *QueryMetricsWithExpressionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /ds/query][%d] queryMetricsWithExpressionsBadRequest  %+v", 400, o.Payload)
}
func (o *QueryMetricsWithExpressionsBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *QueryMetricsWithExpressionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryMetricsWithExpressionsUnauthorized creates a QueryMetricsWithExpressionsUnauthorized with default headers values
func NewQueryMetricsWithExpressionsUnauthorized() *QueryMetricsWithExpressionsUnauthorized {
	return &QueryMetricsWithExpressionsUnauthorized{}
}

/*
QueryMetricsWithExpressionsUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type QueryMetricsWithExpressionsUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *QueryMetricsWithExpressionsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ds/query][%d] queryMetricsWithExpressionsUnauthorized  %+v", 401, o.Payload)
}
func (o *QueryMetricsWithExpressionsUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *QueryMetricsWithExpressionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryMetricsWithExpressionsForbidden creates a QueryMetricsWithExpressionsForbidden with default headers values
func NewQueryMetricsWithExpressionsForbidden() *QueryMetricsWithExpressionsForbidden {
	return &QueryMetricsWithExpressionsForbidden{}
}

/*
QueryMetricsWithExpressionsForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type QueryMetricsWithExpressionsForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *QueryMetricsWithExpressionsForbidden) Error() string {
	return fmt.Sprintf("[POST /ds/query][%d] queryMetricsWithExpressionsForbidden  %+v", 403, o.Payload)
}
func (o *QueryMetricsWithExpressionsForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *QueryMetricsWithExpressionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryMetricsWithExpressionsInternalServerError creates a QueryMetricsWithExpressionsInternalServerError with default headers values
func NewQueryMetricsWithExpressionsInternalServerError() *QueryMetricsWithExpressionsInternalServerError {
	return &QueryMetricsWithExpressionsInternalServerError{}
}

/*
QueryMetricsWithExpressionsInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type QueryMetricsWithExpressionsInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *QueryMetricsWithExpressionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /ds/query][%d] queryMetricsWithExpressionsInternalServerError  %+v", 500, o.Payload)
}
func (o *QueryMetricsWithExpressionsInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *QueryMetricsWithExpressionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
