// Code generated by go-swagger; DO NOT EDIT.

package admin_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// AdminDisableUserReader is a Reader for the AdminDisableUser structure.
type AdminDisableUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminDisableUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminDisableUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminDisableUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAdminDisableUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAdminDisableUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAdminDisableUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAdminDisableUserOK creates a AdminDisableUserOK with default headers values
func NewAdminDisableUserOK() *AdminDisableUserOK {
	return &AdminDisableUserOK{}
}

/*
AdminDisableUserOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type AdminDisableUserOK struct {
	Payload *models.SuccessResponseBody
}

func (o *AdminDisableUserOK) Error() string {
	return fmt.Sprintf("[POST /admin/users/{user_id}/disable][%d] adminDisableUserOK  %+v", 200, o.Payload)
}
func (o *AdminDisableUserOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *AdminDisableUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminDisableUserUnauthorized creates a AdminDisableUserUnauthorized with default headers values
func NewAdminDisableUserUnauthorized() *AdminDisableUserUnauthorized {
	return &AdminDisableUserUnauthorized{}
}

/*
AdminDisableUserUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type AdminDisableUserUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *AdminDisableUserUnauthorized) Error() string {
	return fmt.Sprintf("[POST /admin/users/{user_id}/disable][%d] adminDisableUserUnauthorized  %+v", 401, o.Payload)
}
func (o *AdminDisableUserUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *AdminDisableUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminDisableUserForbidden creates a AdminDisableUserForbidden with default headers values
func NewAdminDisableUserForbidden() *AdminDisableUserForbidden {
	return &AdminDisableUserForbidden{}
}

/*
AdminDisableUserForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type AdminDisableUserForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *AdminDisableUserForbidden) Error() string {
	return fmt.Sprintf("[POST /admin/users/{user_id}/disable][%d] adminDisableUserForbidden  %+v", 403, o.Payload)
}
func (o *AdminDisableUserForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *AdminDisableUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminDisableUserNotFound creates a AdminDisableUserNotFound with default headers values
func NewAdminDisableUserNotFound() *AdminDisableUserNotFound {
	return &AdminDisableUserNotFound{}
}

/*
AdminDisableUserNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type AdminDisableUserNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *AdminDisableUserNotFound) Error() string {
	return fmt.Sprintf("[POST /admin/users/{user_id}/disable][%d] adminDisableUserNotFound  %+v", 404, o.Payload)
}
func (o *AdminDisableUserNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *AdminDisableUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminDisableUserInternalServerError creates a AdminDisableUserInternalServerError with default headers values
func NewAdminDisableUserInternalServerError() *AdminDisableUserInternalServerError {
	return &AdminDisableUserInternalServerError{}
}

/*
AdminDisableUserInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type AdminDisableUserInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *AdminDisableUserInternalServerError) Error() string {
	return fmt.Sprintf("[POST /admin/users/{user_id}/disable][%d] adminDisableUserInternalServerError  %+v", 500, o.Payload)
}
func (o *AdminDisableUserInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *AdminDisableUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
