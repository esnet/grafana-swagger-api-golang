// Code generated by go-swagger; DO NOT EDIT.

package snapshots

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// DeleteDashboardSnapshotReader is a Reader for the DeleteDashboardSnapshot structure.
type DeleteDashboardSnapshotReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDashboardSnapshotReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteDashboardSnapshotOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteDashboardSnapshotForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteDashboardSnapshotNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteDashboardSnapshotInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteDashboardSnapshotOK creates a DeleteDashboardSnapshotOK with default headers values
func NewDeleteDashboardSnapshotOK() *DeleteDashboardSnapshotOK {
	return &DeleteDashboardSnapshotOK{}
}

/*
DeleteDashboardSnapshotOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type DeleteDashboardSnapshotOK struct {
	Payload *models.SuccessResponseBody
}

func (o *DeleteDashboardSnapshotOK) Error() string {
	return fmt.Sprintf("[DELETE /snapshots/{key}][%d] deleteDashboardSnapshotOK  %+v", 200, o.Payload)
}
func (o *DeleteDashboardSnapshotOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *DeleteDashboardSnapshotOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDashboardSnapshotForbidden creates a DeleteDashboardSnapshotForbidden with default headers values
func NewDeleteDashboardSnapshotForbidden() *DeleteDashboardSnapshotForbidden {
	return &DeleteDashboardSnapshotForbidden{}
}

/*
DeleteDashboardSnapshotForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type DeleteDashboardSnapshotForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteDashboardSnapshotForbidden) Error() string {
	return fmt.Sprintf("[DELETE /snapshots/{key}][%d] deleteDashboardSnapshotForbidden  %+v", 403, o.Payload)
}
func (o *DeleteDashboardSnapshotForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteDashboardSnapshotForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDashboardSnapshotNotFound creates a DeleteDashboardSnapshotNotFound with default headers values
func NewDeleteDashboardSnapshotNotFound() *DeleteDashboardSnapshotNotFound {
	return &DeleteDashboardSnapshotNotFound{}
}

/*
DeleteDashboardSnapshotNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type DeleteDashboardSnapshotNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteDashboardSnapshotNotFound) Error() string {
	return fmt.Sprintf("[DELETE /snapshots/{key}][%d] deleteDashboardSnapshotNotFound  %+v", 404, o.Payload)
}
func (o *DeleteDashboardSnapshotNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteDashboardSnapshotNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDashboardSnapshotInternalServerError creates a DeleteDashboardSnapshotInternalServerError with default headers values
func NewDeleteDashboardSnapshotInternalServerError() *DeleteDashboardSnapshotInternalServerError {
	return &DeleteDashboardSnapshotInternalServerError{}
}

/*
DeleteDashboardSnapshotInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type DeleteDashboardSnapshotInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteDashboardSnapshotInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /snapshots/{key}][%d] deleteDashboardSnapshotInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteDashboardSnapshotInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteDashboardSnapshotInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
