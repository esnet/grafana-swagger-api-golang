// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// PauseAllAlertsReader is a Reader for the PauseAllAlerts structure.
type PauseAllAlertsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PauseAllAlertsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPauseAllAlertsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPauseAllAlertsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPauseAllAlertsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPauseAllAlertsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPauseAllAlertsOK creates a PauseAllAlertsOK with default headers values
func NewPauseAllAlertsOK() *PauseAllAlertsOK {
	return &PauseAllAlertsOK{}
}

/*
PauseAllAlertsOK describes a response with status code 200, with default header values.

(empty)
*/
type PauseAllAlertsOK struct {
	Payload *models.PauseAllAlertsOKBody
}

func (o *PauseAllAlertsOK) Error() string {
	return fmt.Sprintf("[POST /admin/pause-all-alerts][%d] pauseAllAlertsOK  %+v", 200, o.Payload)
}
func (o *PauseAllAlertsOK) GetPayload() *models.PauseAllAlertsOKBody {
	return o.Payload
}

func (o *PauseAllAlertsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PauseAllAlertsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPauseAllAlertsUnauthorized creates a PauseAllAlertsUnauthorized with default headers values
func NewPauseAllAlertsUnauthorized() *PauseAllAlertsUnauthorized {
	return &PauseAllAlertsUnauthorized{}
}

/*
PauseAllAlertsUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type PauseAllAlertsUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *PauseAllAlertsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /admin/pause-all-alerts][%d] pauseAllAlertsUnauthorized  %+v", 401, o.Payload)
}
func (o *PauseAllAlertsUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PauseAllAlertsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPauseAllAlertsForbidden creates a PauseAllAlertsForbidden with default headers values
func NewPauseAllAlertsForbidden() *PauseAllAlertsForbidden {
	return &PauseAllAlertsForbidden{}
}

/*
PauseAllAlertsForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type PauseAllAlertsForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *PauseAllAlertsForbidden) Error() string {
	return fmt.Sprintf("[POST /admin/pause-all-alerts][%d] pauseAllAlertsForbidden  %+v", 403, o.Payload)
}
func (o *PauseAllAlertsForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PauseAllAlertsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPauseAllAlertsInternalServerError creates a PauseAllAlertsInternalServerError with default headers values
func NewPauseAllAlertsInternalServerError() *PauseAllAlertsInternalServerError {
	return &PauseAllAlertsInternalServerError{}
}

/*
PauseAllAlertsInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type PauseAllAlertsInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *PauseAllAlertsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /admin/pause-all-alerts][%d] pauseAllAlertsInternalServerError  %+v", 500, o.Payload)
}
func (o *PauseAllAlertsInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PauseAllAlertsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
