// Code generated by go-swagger; DO NOT EDIT.

package signed_in_user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// GetUserAuthTokensReader is a Reader for the GetUserAuthTokens structure.
type GetUserAuthTokensReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserAuthTokensReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserAuthTokensOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetUserAuthTokensUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserAuthTokensForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUserAuthTokensInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUserAuthTokensOK creates a GetUserAuthTokensOK with default headers values
func NewGetUserAuthTokensOK() *GetUserAuthTokensOK {
	return &GetUserAuthTokensOK{}
}

/*
GetUserAuthTokensOK describes a response with status code 200, with default header values.

(empty)
*/
type GetUserAuthTokensOK struct {
	Payload []*models.UserToken
}

func (o *GetUserAuthTokensOK) Error() string {
	return fmt.Sprintf("[GET /user/auth-tokens][%d] getUserAuthTokensOK  %+v", 200, o.Payload)
}
func (o *GetUserAuthTokensOK) GetPayload() []*models.UserToken {
	return o.Payload
}

func (o *GetUserAuthTokensOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserAuthTokensUnauthorized creates a GetUserAuthTokensUnauthorized with default headers values
func NewGetUserAuthTokensUnauthorized() *GetUserAuthTokensUnauthorized {
	return &GetUserAuthTokensUnauthorized{}
}

/*
GetUserAuthTokensUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type GetUserAuthTokensUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *GetUserAuthTokensUnauthorized) Error() string {
	return fmt.Sprintf("[GET /user/auth-tokens][%d] getUserAuthTokensUnauthorized  %+v", 401, o.Payload)
}
func (o *GetUserAuthTokensUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetUserAuthTokensUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserAuthTokensForbidden creates a GetUserAuthTokensForbidden with default headers values
func NewGetUserAuthTokensForbidden() *GetUserAuthTokensForbidden {
	return &GetUserAuthTokensForbidden{}
}

/*
GetUserAuthTokensForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type GetUserAuthTokensForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *GetUserAuthTokensForbidden) Error() string {
	return fmt.Sprintf("[GET /user/auth-tokens][%d] getUserAuthTokensForbidden  %+v", 403, o.Payload)
}
func (o *GetUserAuthTokensForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetUserAuthTokensForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserAuthTokensInternalServerError creates a GetUserAuthTokensInternalServerError with default headers values
func NewGetUserAuthTokensInternalServerError() *GetUserAuthTokensInternalServerError {
	return &GetUserAuthTokensInternalServerError{}
}

/*
GetUserAuthTokensInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type GetUserAuthTokensInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *GetUserAuthTokensInternalServerError) Error() string {
	return fmt.Sprintf("[GET /user/auth-tokens][%d] getUserAuthTokensInternalServerError  %+v", 500, o.Payload)
}
func (o *GetUserAuthTokensInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetUserAuthTokensInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
