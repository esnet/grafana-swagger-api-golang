// Code generated by go-swagger; DO NOT EDIT.

package admin_ldap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// PostSyncUserWithLDAPReader is a Reader for the PostSyncUserWithLDAP structure.
type PostSyncUserWithLDAPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostSyncUserWithLDAPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostSyncUserWithLDAPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPostSyncUserWithLDAPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostSyncUserWithLDAPForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostSyncUserWithLDAPInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostSyncUserWithLDAPOK creates a PostSyncUserWithLDAPOK with default headers values
func NewPostSyncUserWithLDAPOK() *PostSyncUserWithLDAPOK {
	return &PostSyncUserWithLDAPOK{}
}

/*
PostSyncUserWithLDAPOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type PostSyncUserWithLDAPOK struct {
	Payload *models.SuccessResponseBody
}

func (o *PostSyncUserWithLDAPOK) Error() string {
	return fmt.Sprintf("[POST /admin/ldap/sync/{user_id}][%d] postSyncUserWithLDAPOK  %+v", 200, o.Payload)
}
func (o *PostSyncUserWithLDAPOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *PostSyncUserWithLDAPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSyncUserWithLDAPUnauthorized creates a PostSyncUserWithLDAPUnauthorized with default headers values
func NewPostSyncUserWithLDAPUnauthorized() *PostSyncUserWithLDAPUnauthorized {
	return &PostSyncUserWithLDAPUnauthorized{}
}

/*
PostSyncUserWithLDAPUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type PostSyncUserWithLDAPUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *PostSyncUserWithLDAPUnauthorized) Error() string {
	return fmt.Sprintf("[POST /admin/ldap/sync/{user_id}][%d] postSyncUserWithLDAPUnauthorized  %+v", 401, o.Payload)
}
func (o *PostSyncUserWithLDAPUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PostSyncUserWithLDAPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSyncUserWithLDAPForbidden creates a PostSyncUserWithLDAPForbidden with default headers values
func NewPostSyncUserWithLDAPForbidden() *PostSyncUserWithLDAPForbidden {
	return &PostSyncUserWithLDAPForbidden{}
}

/*
PostSyncUserWithLDAPForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type PostSyncUserWithLDAPForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *PostSyncUserWithLDAPForbidden) Error() string {
	return fmt.Sprintf("[POST /admin/ldap/sync/{user_id}][%d] postSyncUserWithLDAPForbidden  %+v", 403, o.Payload)
}
func (o *PostSyncUserWithLDAPForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PostSyncUserWithLDAPForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostSyncUserWithLDAPInternalServerError creates a PostSyncUserWithLDAPInternalServerError with default headers values
func NewPostSyncUserWithLDAPInternalServerError() *PostSyncUserWithLDAPInternalServerError {
	return &PostSyncUserWithLDAPInternalServerError{}
}

/*
PostSyncUserWithLDAPInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type PostSyncUserWithLDAPInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *PostSyncUserWithLDAPInternalServerError) Error() string {
	return fmt.Sprintf("[POST /admin/ldap/sync/{user_id}][%d] postSyncUserWithLDAPInternalServerError  %+v", 500, o.Payload)
}
func (o *PostSyncUserWithLDAPInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PostSyncUserWithLDAPInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
