// Code generated by go-swagger; DO NOT EDIT.

package api_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIkeysParams creates a new GetAPIkeysParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIkeysParams() *GetAPIkeysParams {
	return &GetAPIkeysParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIkeysParamsWithTimeout creates a new GetAPIkeysParams object
// with the ability to set a timeout on a request.
func NewGetAPIkeysParamsWithTimeout(timeout time.Duration) *GetAPIkeysParams {
	return &GetAPIkeysParams{
		timeout: timeout,
	}
}

// NewGetAPIkeysParamsWithContext creates a new GetAPIkeysParams object
// with the ability to set a context for a request.
func NewGetAPIkeysParamsWithContext(ctx context.Context) *GetAPIkeysParams {
	return &GetAPIkeysParams{
		Context: ctx,
	}
}

// NewGetAPIkeysParamsWithHTTPClient creates a new GetAPIkeysParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIkeysParamsWithHTTPClient(client *http.Client) *GetAPIkeysParams {
	return &GetAPIkeysParams{
		HTTPClient: client,
	}
}

/*
GetAPIkeysParams contains all the parameters to send to the API endpoint

	for the get a p ikeys operation.

	Typically these are written to a http.Request.
*/
type GetAPIkeysParams struct {

	/* IncludeExpired.

	   Show expired keys
	*/
	IncludeExpired *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get a p ikeys params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIkeysParams) WithDefaults() *GetAPIkeysParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get a p ikeys params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIkeysParams) SetDefaults() {
	var (
		includeExpiredDefault = bool(false)
	)

	val := GetAPIkeysParams{
		IncludeExpired: &includeExpiredDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get a p ikeys params
func (o *GetAPIkeysParams) WithTimeout(timeout time.Duration) *GetAPIkeysParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get a p ikeys params
func (o *GetAPIkeysParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get a p ikeys params
func (o *GetAPIkeysParams) WithContext(ctx context.Context) *GetAPIkeysParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get a p ikeys params
func (o *GetAPIkeysParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get a p ikeys params
func (o *GetAPIkeysParams) WithHTTPClient(client *http.Client) *GetAPIkeysParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get a p ikeys params
func (o *GetAPIkeysParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeExpired adds the includeExpired to the get a p ikeys params
func (o *GetAPIkeysParams) WithIncludeExpired(includeExpired *bool) *GetAPIkeysParams {
	o.SetIncludeExpired(includeExpired)
	return o
}

// SetIncludeExpired adds the includeExpired to the get a p ikeys params
func (o *GetAPIkeysParams) SetIncludeExpired(includeExpired *bool) {
	o.IncludeExpired = includeExpired
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIkeysParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeExpired != nil {

		// query param includeExpired
		var qrIncludeExpired bool

		if o.IncludeExpired != nil {
			qrIncludeExpired = *o.IncludeExpired
		}
		qIncludeExpired := swag.FormatBool(qrIncludeExpired)
		if qIncludeExpired != "" {

			if err := r.SetQueryParam("includeExpired", qIncludeExpired); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
