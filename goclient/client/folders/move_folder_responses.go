// Code generated by go-swagger; DO NOT EDIT.

package folders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// MoveFolderReader is a Reader for the MoveFolder structure.
type MoveFolderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MoveFolderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMoveFolderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewMoveFolderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewMoveFolderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewMoveFolderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewMoveFolderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewMoveFolderOK creates a MoveFolderOK with default headers values
func NewMoveFolderOK() *MoveFolderOK {
	return &MoveFolderOK{}
}

/*
MoveFolderOK describes a response with status code 200, with default header values.

(empty)
*/
type MoveFolderOK struct {
	Payload *models.Folder
}

func (o *MoveFolderOK) Error() string {
	return fmt.Sprintf("[POST /folders/{folder_uid}/move][%d] moveFolderOK  %+v", 200, o.Payload)
}
func (o *MoveFolderOK) GetPayload() *models.Folder {
	return o.Payload
}

func (o *MoveFolderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Folder)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMoveFolderUnauthorized creates a MoveFolderUnauthorized with default headers values
func NewMoveFolderUnauthorized() *MoveFolderUnauthorized {
	return &MoveFolderUnauthorized{}
}

/*
MoveFolderUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type MoveFolderUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *MoveFolderUnauthorized) Error() string {
	return fmt.Sprintf("[POST /folders/{folder_uid}/move][%d] moveFolderUnauthorized  %+v", 401, o.Payload)
}
func (o *MoveFolderUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *MoveFolderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMoveFolderForbidden creates a MoveFolderForbidden with default headers values
func NewMoveFolderForbidden() *MoveFolderForbidden {
	return &MoveFolderForbidden{}
}

/*
MoveFolderForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type MoveFolderForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *MoveFolderForbidden) Error() string {
	return fmt.Sprintf("[POST /folders/{folder_uid}/move][%d] moveFolderForbidden  %+v", 403, o.Payload)
}
func (o *MoveFolderForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *MoveFolderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMoveFolderNotFound creates a MoveFolderNotFound with default headers values
func NewMoveFolderNotFound() *MoveFolderNotFound {
	return &MoveFolderNotFound{}
}

/*
MoveFolderNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type MoveFolderNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *MoveFolderNotFound) Error() string {
	return fmt.Sprintf("[POST /folders/{folder_uid}/move][%d] moveFolderNotFound  %+v", 404, o.Payload)
}
func (o *MoveFolderNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *MoveFolderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMoveFolderInternalServerError creates a MoveFolderInternalServerError with default headers values
func NewMoveFolderInternalServerError() *MoveFolderInternalServerError {
	return &MoveFolderInternalServerError{}
}

/*
MoveFolderInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type MoveFolderInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *MoveFolderInternalServerError) Error() string {
	return fmt.Sprintf("[POST /folders/{folder_uid}/move][%d] moveFolderInternalServerError  %+v", 500, o.Payload)
}
func (o *MoveFolderInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *MoveFolderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
