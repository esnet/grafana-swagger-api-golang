// Code generated by go-swagger; DO NOT EDIT.

package sync_team_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// RemoveTeamGroupAPIReader is a Reader for the RemoveTeamGroupAPI structure.
type RemoveTeamGroupAPIReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveTeamGroupAPIReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRemoveTeamGroupAPIOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveTeamGroupAPIBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRemoveTeamGroupAPIUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRemoveTeamGroupAPIForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemoveTeamGroupAPINotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveTeamGroupAPIInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRemoveTeamGroupAPIOK creates a RemoveTeamGroupAPIOK with default headers values
func NewRemoveTeamGroupAPIOK() *RemoveTeamGroupAPIOK {
	return &RemoveTeamGroupAPIOK{}
}

/*
RemoveTeamGroupAPIOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type RemoveTeamGroupAPIOK struct {
	Payload *models.SuccessResponseBody
}

func (o *RemoveTeamGroupAPIOK) Error() string {
	return fmt.Sprintf("[DELETE /teams/{teamId}/groups/{groupId}][%d] removeTeamGroupApiOK  %+v", 200, o.Payload)
}
func (o *RemoveTeamGroupAPIOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *RemoveTeamGroupAPIOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveTeamGroupAPIBadRequest creates a RemoveTeamGroupAPIBadRequest with default headers values
func NewRemoveTeamGroupAPIBadRequest() *RemoveTeamGroupAPIBadRequest {
	return &RemoveTeamGroupAPIBadRequest{}
}

/*
RemoveTeamGroupAPIBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type RemoveTeamGroupAPIBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *RemoveTeamGroupAPIBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /teams/{teamId}/groups/{groupId}][%d] removeTeamGroupApiBadRequest  %+v", 400, o.Payload)
}
func (o *RemoveTeamGroupAPIBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *RemoveTeamGroupAPIBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveTeamGroupAPIUnauthorized creates a RemoveTeamGroupAPIUnauthorized with default headers values
func NewRemoveTeamGroupAPIUnauthorized() *RemoveTeamGroupAPIUnauthorized {
	return &RemoveTeamGroupAPIUnauthorized{}
}

/*
RemoveTeamGroupAPIUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type RemoveTeamGroupAPIUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *RemoveTeamGroupAPIUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /teams/{teamId}/groups/{groupId}][%d] removeTeamGroupApiUnauthorized  %+v", 401, o.Payload)
}
func (o *RemoveTeamGroupAPIUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *RemoveTeamGroupAPIUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveTeamGroupAPIForbidden creates a RemoveTeamGroupAPIForbidden with default headers values
func NewRemoveTeamGroupAPIForbidden() *RemoveTeamGroupAPIForbidden {
	return &RemoveTeamGroupAPIForbidden{}
}

/*
RemoveTeamGroupAPIForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type RemoveTeamGroupAPIForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *RemoveTeamGroupAPIForbidden) Error() string {
	return fmt.Sprintf("[DELETE /teams/{teamId}/groups/{groupId}][%d] removeTeamGroupApiForbidden  %+v", 403, o.Payload)
}
func (o *RemoveTeamGroupAPIForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *RemoveTeamGroupAPIForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveTeamGroupAPINotFound creates a RemoveTeamGroupAPINotFound with default headers values
func NewRemoveTeamGroupAPINotFound() *RemoveTeamGroupAPINotFound {
	return &RemoveTeamGroupAPINotFound{}
}

/*
RemoveTeamGroupAPINotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type RemoveTeamGroupAPINotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *RemoveTeamGroupAPINotFound) Error() string {
	return fmt.Sprintf("[DELETE /teams/{teamId}/groups/{groupId}][%d] removeTeamGroupApiNotFound  %+v", 404, o.Payload)
}
func (o *RemoveTeamGroupAPINotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *RemoveTeamGroupAPINotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveTeamGroupAPIInternalServerError creates a RemoveTeamGroupAPIInternalServerError with default headers values
func NewRemoveTeamGroupAPIInternalServerError() *RemoveTeamGroupAPIInternalServerError {
	return &RemoveTeamGroupAPIInternalServerError{}
}

/*
RemoveTeamGroupAPIInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type RemoveTeamGroupAPIInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *RemoveTeamGroupAPIInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /teams/{teamId}/groups/{groupId}][%d] removeTeamGroupApiInternalServerError  %+v", 500, o.Payload)
}
func (o *RemoveTeamGroupAPIInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *RemoveTeamGroupAPIInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
