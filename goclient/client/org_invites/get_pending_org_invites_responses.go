// Code generated by go-swagger; DO NOT EDIT.

package org_invites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// GetPendingOrgInvitesReader is a Reader for the GetPendingOrgInvites structure.
type GetPendingOrgInvitesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPendingOrgInvitesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPendingOrgInvitesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetPendingOrgInvitesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPendingOrgInvitesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPendingOrgInvitesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPendingOrgInvitesOK creates a GetPendingOrgInvitesOK with default headers values
func NewGetPendingOrgInvitesOK() *GetPendingOrgInvitesOK {
	return &GetPendingOrgInvitesOK{}
}

/*
GetPendingOrgInvitesOK describes a response with status code 200, with default header values.

(empty)
*/
type GetPendingOrgInvitesOK struct {
	Payload []*models.TempUserDTO
}

func (o *GetPendingOrgInvitesOK) Error() string {
	return fmt.Sprintf("[GET /org/invites][%d] getPendingOrgInvitesOK  %+v", 200, o.Payload)
}
func (o *GetPendingOrgInvitesOK) GetPayload() []*models.TempUserDTO {
	return o.Payload
}

func (o *GetPendingOrgInvitesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPendingOrgInvitesUnauthorized creates a GetPendingOrgInvitesUnauthorized with default headers values
func NewGetPendingOrgInvitesUnauthorized() *GetPendingOrgInvitesUnauthorized {
	return &GetPendingOrgInvitesUnauthorized{}
}

/*
GetPendingOrgInvitesUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type GetPendingOrgInvitesUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *GetPendingOrgInvitesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /org/invites][%d] getPendingOrgInvitesUnauthorized  %+v", 401, o.Payload)
}
func (o *GetPendingOrgInvitesUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetPendingOrgInvitesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPendingOrgInvitesForbidden creates a GetPendingOrgInvitesForbidden with default headers values
func NewGetPendingOrgInvitesForbidden() *GetPendingOrgInvitesForbidden {
	return &GetPendingOrgInvitesForbidden{}
}

/*
GetPendingOrgInvitesForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type GetPendingOrgInvitesForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *GetPendingOrgInvitesForbidden) Error() string {
	return fmt.Sprintf("[GET /org/invites][%d] getPendingOrgInvitesForbidden  %+v", 403, o.Payload)
}
func (o *GetPendingOrgInvitesForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetPendingOrgInvitesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPendingOrgInvitesInternalServerError creates a GetPendingOrgInvitesInternalServerError with default headers values
func NewGetPendingOrgInvitesInternalServerError() *GetPendingOrgInvitesInternalServerError {
	return &GetPendingOrgInvitesInternalServerError{}
}

/*
GetPendingOrgInvitesInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type GetPendingOrgInvitesInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *GetPendingOrgInvitesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /org/invites][%d] getPendingOrgInvitesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetPendingOrgInvitesInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetPendingOrgInvitesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
