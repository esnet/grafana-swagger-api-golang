// Code generated by go-swagger; DO NOT EDIT.

package org_preferences

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// PatchOrgPreferencesReader is a Reader for the PatchOrgPreferences structure.
type PatchOrgPreferencesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchOrgPreferencesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchOrgPreferencesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchOrgPreferencesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchOrgPreferencesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchOrgPreferencesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchOrgPreferencesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchOrgPreferencesOK creates a PatchOrgPreferencesOK with default headers values
func NewPatchOrgPreferencesOK() *PatchOrgPreferencesOK {
	return &PatchOrgPreferencesOK{}
}

/*
PatchOrgPreferencesOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type PatchOrgPreferencesOK struct {
	Payload *models.SuccessResponseBody
}

func (o *PatchOrgPreferencesOK) Error() string {
	return fmt.Sprintf("[PATCH /org/preferences][%d] patchOrgPreferencesOK  %+v", 200, o.Payload)
}
func (o *PatchOrgPreferencesOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *PatchOrgPreferencesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrgPreferencesBadRequest creates a PatchOrgPreferencesBadRequest with default headers values
func NewPatchOrgPreferencesBadRequest() *PatchOrgPreferencesBadRequest {
	return &PatchOrgPreferencesBadRequest{}
}

/*
PatchOrgPreferencesBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type PatchOrgPreferencesBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *PatchOrgPreferencesBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /org/preferences][%d] patchOrgPreferencesBadRequest  %+v", 400, o.Payload)
}
func (o *PatchOrgPreferencesBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PatchOrgPreferencesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrgPreferencesUnauthorized creates a PatchOrgPreferencesUnauthorized with default headers values
func NewPatchOrgPreferencesUnauthorized() *PatchOrgPreferencesUnauthorized {
	return &PatchOrgPreferencesUnauthorized{}
}

/*
PatchOrgPreferencesUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type PatchOrgPreferencesUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *PatchOrgPreferencesUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /org/preferences][%d] patchOrgPreferencesUnauthorized  %+v", 401, o.Payload)
}
func (o *PatchOrgPreferencesUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PatchOrgPreferencesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrgPreferencesForbidden creates a PatchOrgPreferencesForbidden with default headers values
func NewPatchOrgPreferencesForbidden() *PatchOrgPreferencesForbidden {
	return &PatchOrgPreferencesForbidden{}
}

/*
PatchOrgPreferencesForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type PatchOrgPreferencesForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *PatchOrgPreferencesForbidden) Error() string {
	return fmt.Sprintf("[PATCH /org/preferences][%d] patchOrgPreferencesForbidden  %+v", 403, o.Payload)
}
func (o *PatchOrgPreferencesForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PatchOrgPreferencesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrgPreferencesInternalServerError creates a PatchOrgPreferencesInternalServerError with default headers values
func NewPatchOrgPreferencesInternalServerError() *PatchOrgPreferencesInternalServerError {
	return &PatchOrgPreferencesInternalServerError{}
}

/*
PatchOrgPreferencesInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type PatchOrgPreferencesInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *PatchOrgPreferencesInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /org/preferences][%d] patchOrgPreferencesInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchOrgPreferencesInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PatchOrgPreferencesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
