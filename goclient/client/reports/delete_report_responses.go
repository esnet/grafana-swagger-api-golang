// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// DeleteReportReader is a Reader for the DeleteReport structure.
type DeleteReportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteReportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteReportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteReportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteReportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteReportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteReportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteReportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteReportOK creates a DeleteReportOK with default headers values
func NewDeleteReportOK() *DeleteReportOK {
	return &DeleteReportOK{}
}

/*
DeleteReportOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type DeleteReportOK struct {
	Payload *models.SuccessResponseBody
}

func (o *DeleteReportOK) Error() string {
	return fmt.Sprintf("[DELETE /reports/{id}][%d] deleteReportOK  %+v", 200, o.Payload)
}
func (o *DeleteReportOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *DeleteReportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteReportBadRequest creates a DeleteReportBadRequest with default headers values
func NewDeleteReportBadRequest() *DeleteReportBadRequest {
	return &DeleteReportBadRequest{}
}

/*
DeleteReportBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type DeleteReportBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteReportBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /reports/{id}][%d] deleteReportBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteReportBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteReportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteReportUnauthorized creates a DeleteReportUnauthorized with default headers values
func NewDeleteReportUnauthorized() *DeleteReportUnauthorized {
	return &DeleteReportUnauthorized{}
}

/*
DeleteReportUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type DeleteReportUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteReportUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /reports/{id}][%d] deleteReportUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteReportUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteReportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteReportForbidden creates a DeleteReportForbidden with default headers values
func NewDeleteReportForbidden() *DeleteReportForbidden {
	return &DeleteReportForbidden{}
}

/*
DeleteReportForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type DeleteReportForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteReportForbidden) Error() string {
	return fmt.Sprintf("[DELETE /reports/{id}][%d] deleteReportForbidden  %+v", 403, o.Payload)
}
func (o *DeleteReportForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteReportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteReportNotFound creates a DeleteReportNotFound with default headers values
func NewDeleteReportNotFound() *DeleteReportNotFound {
	return &DeleteReportNotFound{}
}

/*
DeleteReportNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type DeleteReportNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteReportNotFound) Error() string {
	return fmt.Sprintf("[DELETE /reports/{id}][%d] deleteReportNotFound  %+v", 404, o.Payload)
}
func (o *DeleteReportNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteReportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteReportInternalServerError creates a DeleteReportInternalServerError with default headers values
func NewDeleteReportInternalServerError() *DeleteReportInternalServerError {
	return &DeleteReportInternalServerError{}
}

/*
DeleteReportInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type DeleteReportInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteReportInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /reports/{id}][%d] deleteReportInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteReportInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteReportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
