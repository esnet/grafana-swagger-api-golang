// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// UpdateReportReader is a Reader for the UpdateReport structure.
type UpdateReportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateReportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateReportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateReportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateReportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateReportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateReportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateReportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateReportOK creates a UpdateReportOK with default headers values
func NewUpdateReportOK() *UpdateReportOK {
	return &UpdateReportOK{}
}

/*
UpdateReportOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type UpdateReportOK struct {
	Payload *models.SuccessResponseBody
}

func (o *UpdateReportOK) Error() string {
	return fmt.Sprintf("[PUT /reports/{id}][%d] updateReportOK  %+v", 200, o.Payload)
}
func (o *UpdateReportOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *UpdateReportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReportBadRequest creates a UpdateReportBadRequest with default headers values
func NewUpdateReportBadRequest() *UpdateReportBadRequest {
	return &UpdateReportBadRequest{}
}

/*
UpdateReportBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type UpdateReportBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateReportBadRequest) Error() string {
	return fmt.Sprintf("[PUT /reports/{id}][%d] updateReportBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateReportBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateReportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReportUnauthorized creates a UpdateReportUnauthorized with default headers values
func NewUpdateReportUnauthorized() *UpdateReportUnauthorized {
	return &UpdateReportUnauthorized{}
}

/*
UpdateReportUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type UpdateReportUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateReportUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /reports/{id}][%d] updateReportUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateReportUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateReportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReportForbidden creates a UpdateReportForbidden with default headers values
func NewUpdateReportForbidden() *UpdateReportForbidden {
	return &UpdateReportForbidden{}
}

/*
UpdateReportForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type UpdateReportForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateReportForbidden) Error() string {
	return fmt.Sprintf("[PUT /reports/{id}][%d] updateReportForbidden  %+v", 403, o.Payload)
}
func (o *UpdateReportForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateReportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReportNotFound creates a UpdateReportNotFound with default headers values
func NewUpdateReportNotFound() *UpdateReportNotFound {
	return &UpdateReportNotFound{}
}

/*
UpdateReportNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type UpdateReportNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateReportNotFound) Error() string {
	return fmt.Sprintf("[PUT /reports/{id}][%d] updateReportNotFound  %+v", 404, o.Payload)
}
func (o *UpdateReportNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateReportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReportInternalServerError creates a UpdateReportInternalServerError with default headers values
func NewUpdateReportInternalServerError() *UpdateReportInternalServerError {
	return &UpdateReportInternalServerError{}
}

/*
UpdateReportInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type UpdateReportInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateReportInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /reports/{id}][%d] updateReportInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateReportInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateReportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
