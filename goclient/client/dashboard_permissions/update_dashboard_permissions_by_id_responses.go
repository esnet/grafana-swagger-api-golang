// Code generated by go-swagger; DO NOT EDIT.

package dashboard_permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// UpdateDashboardPermissionsByIDReader is a Reader for the UpdateDashboardPermissionsByID structure.
type UpdateDashboardPermissionsByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDashboardPermissionsByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDashboardPermissionsByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDashboardPermissionsByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateDashboardPermissionsByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateDashboardPermissionsByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDashboardPermissionsByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDashboardPermissionsByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDashboardPermissionsByIDOK creates a UpdateDashboardPermissionsByIDOK with default headers values
func NewUpdateDashboardPermissionsByIDOK() *UpdateDashboardPermissionsByIDOK {
	return &UpdateDashboardPermissionsByIDOK{}
}

/*
UpdateDashboardPermissionsByIDOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type UpdateDashboardPermissionsByIDOK struct {
	Payload *models.SuccessResponseBody
}

func (o *UpdateDashboardPermissionsByIDOK) Error() string {
	return fmt.Sprintf("[POST /dashboards/id/{DashboardID}/permissions][%d] updateDashboardPermissionsByIdOK  %+v", 200, o.Payload)
}
func (o *UpdateDashboardPermissionsByIDOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *UpdateDashboardPermissionsByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDashboardPermissionsByIDBadRequest creates a UpdateDashboardPermissionsByIDBadRequest with default headers values
func NewUpdateDashboardPermissionsByIDBadRequest() *UpdateDashboardPermissionsByIDBadRequest {
	return &UpdateDashboardPermissionsByIDBadRequest{}
}

/*
UpdateDashboardPermissionsByIDBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type UpdateDashboardPermissionsByIDBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateDashboardPermissionsByIDBadRequest) Error() string {
	return fmt.Sprintf("[POST /dashboards/id/{DashboardID}/permissions][%d] updateDashboardPermissionsByIdBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateDashboardPermissionsByIDBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateDashboardPermissionsByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDashboardPermissionsByIDUnauthorized creates a UpdateDashboardPermissionsByIDUnauthorized with default headers values
func NewUpdateDashboardPermissionsByIDUnauthorized() *UpdateDashboardPermissionsByIDUnauthorized {
	return &UpdateDashboardPermissionsByIDUnauthorized{}
}

/*
UpdateDashboardPermissionsByIDUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type UpdateDashboardPermissionsByIDUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateDashboardPermissionsByIDUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dashboards/id/{DashboardID}/permissions][%d] updateDashboardPermissionsByIdUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateDashboardPermissionsByIDUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateDashboardPermissionsByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDashboardPermissionsByIDForbidden creates a UpdateDashboardPermissionsByIDForbidden with default headers values
func NewUpdateDashboardPermissionsByIDForbidden() *UpdateDashboardPermissionsByIDForbidden {
	return &UpdateDashboardPermissionsByIDForbidden{}
}

/*
UpdateDashboardPermissionsByIDForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type UpdateDashboardPermissionsByIDForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateDashboardPermissionsByIDForbidden) Error() string {
	return fmt.Sprintf("[POST /dashboards/id/{DashboardID}/permissions][%d] updateDashboardPermissionsByIdForbidden  %+v", 403, o.Payload)
}
func (o *UpdateDashboardPermissionsByIDForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateDashboardPermissionsByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDashboardPermissionsByIDNotFound creates a UpdateDashboardPermissionsByIDNotFound with default headers values
func NewUpdateDashboardPermissionsByIDNotFound() *UpdateDashboardPermissionsByIDNotFound {
	return &UpdateDashboardPermissionsByIDNotFound{}
}

/*
UpdateDashboardPermissionsByIDNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type UpdateDashboardPermissionsByIDNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateDashboardPermissionsByIDNotFound) Error() string {
	return fmt.Sprintf("[POST /dashboards/id/{DashboardID}/permissions][%d] updateDashboardPermissionsByIdNotFound  %+v", 404, o.Payload)
}
func (o *UpdateDashboardPermissionsByIDNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateDashboardPermissionsByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDashboardPermissionsByIDInternalServerError creates a UpdateDashboardPermissionsByIDInternalServerError with default headers values
func NewUpdateDashboardPermissionsByIDInternalServerError() *UpdateDashboardPermissionsByIDInternalServerError {
	return &UpdateDashboardPermissionsByIDInternalServerError{}
}

/*
UpdateDashboardPermissionsByIDInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type UpdateDashboardPermissionsByIDInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateDashboardPermissionsByIDInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dashboards/id/{DashboardID}/permissions][%d] updateDashboardPermissionsByIdInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateDashboardPermissionsByIDInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateDashboardPermissionsByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
