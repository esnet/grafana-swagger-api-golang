// Code generated by go-swagger; DO NOT EDIT.

package playlists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// GetPlaylistReader is a Reader for the GetPlaylist structure.
type GetPlaylistReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPlaylistReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPlaylistOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetPlaylistUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPlaylistForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPlaylistNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPlaylistInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPlaylistOK creates a GetPlaylistOK with default headers values
func NewGetPlaylistOK() *GetPlaylistOK {
	return &GetPlaylistOK{}
}

/*
GetPlaylistOK describes a response with status code 200, with default header values.

(empty)
*/
type GetPlaylistOK struct {
	Payload *models.Playlist
}

func (o *GetPlaylistOK) Error() string {
	return fmt.Sprintf("[GET /playlists/{uid}][%d] getPlaylistOK  %+v", 200, o.Payload)
}
func (o *GetPlaylistOK) GetPayload() *models.Playlist {
	return o.Payload
}

func (o *GetPlaylistOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Playlist)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlaylistUnauthorized creates a GetPlaylistUnauthorized with default headers values
func NewGetPlaylistUnauthorized() *GetPlaylistUnauthorized {
	return &GetPlaylistUnauthorized{}
}

/*
GetPlaylistUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type GetPlaylistUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *GetPlaylistUnauthorized) Error() string {
	return fmt.Sprintf("[GET /playlists/{uid}][%d] getPlaylistUnauthorized  %+v", 401, o.Payload)
}
func (o *GetPlaylistUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetPlaylistUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlaylistForbidden creates a GetPlaylistForbidden with default headers values
func NewGetPlaylistForbidden() *GetPlaylistForbidden {
	return &GetPlaylistForbidden{}
}

/*
GetPlaylistForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type GetPlaylistForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *GetPlaylistForbidden) Error() string {
	return fmt.Sprintf("[GET /playlists/{uid}][%d] getPlaylistForbidden  %+v", 403, o.Payload)
}
func (o *GetPlaylistForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetPlaylistForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlaylistNotFound creates a GetPlaylistNotFound with default headers values
func NewGetPlaylistNotFound() *GetPlaylistNotFound {
	return &GetPlaylistNotFound{}
}

/*
GetPlaylistNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type GetPlaylistNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *GetPlaylistNotFound) Error() string {
	return fmt.Sprintf("[GET /playlists/{uid}][%d] getPlaylistNotFound  %+v", 404, o.Payload)
}
func (o *GetPlaylistNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetPlaylistNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlaylistInternalServerError creates a GetPlaylistInternalServerError with default headers values
func NewGetPlaylistInternalServerError() *GetPlaylistInternalServerError {
	return &GetPlaylistInternalServerError{}
}

/*
GetPlaylistInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type GetPlaylistInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *GetPlaylistInternalServerError) Error() string {
	return fmt.Sprintf("[GET /playlists/{uid}][%d] getPlaylistInternalServerError  %+v", 500, o.Payload)
}
func (o *GetPlaylistInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetPlaylistInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
