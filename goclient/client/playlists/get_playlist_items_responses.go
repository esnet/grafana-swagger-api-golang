// Code generated by go-swagger; DO NOT EDIT.

package playlists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// GetPlaylistItemsReader is a Reader for the GetPlaylistItems structure.
type GetPlaylistItemsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPlaylistItemsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPlaylistItemsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetPlaylistItemsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPlaylistItemsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPlaylistItemsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPlaylistItemsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPlaylistItemsOK creates a GetPlaylistItemsOK with default headers values
func NewGetPlaylistItemsOK() *GetPlaylistItemsOK {
	return &GetPlaylistItemsOK{}
}

/*
GetPlaylistItemsOK describes a response with status code 200, with default header values.

(empty)
*/
type GetPlaylistItemsOK struct {
	Payload []*models.PlaylistItem
}

func (o *GetPlaylistItemsOK) Error() string {
	return fmt.Sprintf("[GET /playlists/{uid}/items][%d] getPlaylistItemsOK  %+v", 200, o.Payload)
}
func (o *GetPlaylistItemsOK) GetPayload() []*models.PlaylistItem {
	return o.Payload
}

func (o *GetPlaylistItemsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlaylistItemsUnauthorized creates a GetPlaylistItemsUnauthorized with default headers values
func NewGetPlaylistItemsUnauthorized() *GetPlaylistItemsUnauthorized {
	return &GetPlaylistItemsUnauthorized{}
}

/*
GetPlaylistItemsUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type GetPlaylistItemsUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *GetPlaylistItemsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /playlists/{uid}/items][%d] getPlaylistItemsUnauthorized  %+v", 401, o.Payload)
}
func (o *GetPlaylistItemsUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetPlaylistItemsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlaylistItemsForbidden creates a GetPlaylistItemsForbidden with default headers values
func NewGetPlaylistItemsForbidden() *GetPlaylistItemsForbidden {
	return &GetPlaylistItemsForbidden{}
}

/*
GetPlaylistItemsForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type GetPlaylistItemsForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *GetPlaylistItemsForbidden) Error() string {
	return fmt.Sprintf("[GET /playlists/{uid}/items][%d] getPlaylistItemsForbidden  %+v", 403, o.Payload)
}
func (o *GetPlaylistItemsForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetPlaylistItemsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlaylistItemsNotFound creates a GetPlaylistItemsNotFound with default headers values
func NewGetPlaylistItemsNotFound() *GetPlaylistItemsNotFound {
	return &GetPlaylistItemsNotFound{}
}

/*
GetPlaylistItemsNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type GetPlaylistItemsNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *GetPlaylistItemsNotFound) Error() string {
	return fmt.Sprintf("[GET /playlists/{uid}/items][%d] getPlaylistItemsNotFound  %+v", 404, o.Payload)
}
func (o *GetPlaylistItemsNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetPlaylistItemsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPlaylistItemsInternalServerError creates a GetPlaylistItemsInternalServerError with default headers values
func NewGetPlaylistItemsInternalServerError() *GetPlaylistItemsInternalServerError {
	return &GetPlaylistItemsInternalServerError{}
}

/*
GetPlaylistItemsInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type GetPlaylistItemsInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *GetPlaylistItemsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /playlists/{uid}/items][%d] getPlaylistItemsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetPlaylistItemsInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetPlaylistItemsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
