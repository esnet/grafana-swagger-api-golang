// Code generated by go-swagger; DO NOT EDIT.

package playlists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// UpdatePlaylistReader is a Reader for the UpdatePlaylist structure.
type UpdatePlaylistReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePlaylistReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePlaylistOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdatePlaylistUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdatePlaylistForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePlaylistNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdatePlaylistInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdatePlaylistOK creates a UpdatePlaylistOK with default headers values
func NewUpdatePlaylistOK() *UpdatePlaylistOK {
	return &UpdatePlaylistOK{}
}

/*
UpdatePlaylistOK describes a response with status code 200, with default header values.

(empty)
*/
type UpdatePlaylistOK struct {
	Payload *models.Model
}

func (o *UpdatePlaylistOK) Error() string {
	return fmt.Sprintf("[PUT /playlists/{uid}][%d] updatePlaylistOK  %+v", 200, o.Payload)
}
func (o *UpdatePlaylistOK) GetPayload() *models.Model {
	return o.Payload
}

func (o *UpdatePlaylistOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Model)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePlaylistUnauthorized creates a UpdatePlaylistUnauthorized with default headers values
func NewUpdatePlaylistUnauthorized() *UpdatePlaylistUnauthorized {
	return &UpdatePlaylistUnauthorized{}
}

/*
UpdatePlaylistUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type UpdatePlaylistUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdatePlaylistUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /playlists/{uid}][%d] updatePlaylistUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdatePlaylistUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdatePlaylistUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePlaylistForbidden creates a UpdatePlaylistForbidden with default headers values
func NewUpdatePlaylistForbidden() *UpdatePlaylistForbidden {
	return &UpdatePlaylistForbidden{}
}

/*
UpdatePlaylistForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type UpdatePlaylistForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdatePlaylistForbidden) Error() string {
	return fmt.Sprintf("[PUT /playlists/{uid}][%d] updatePlaylistForbidden  %+v", 403, o.Payload)
}
func (o *UpdatePlaylistForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdatePlaylistForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePlaylistNotFound creates a UpdatePlaylistNotFound with default headers values
func NewUpdatePlaylistNotFound() *UpdatePlaylistNotFound {
	return &UpdatePlaylistNotFound{}
}

/*
UpdatePlaylistNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type UpdatePlaylistNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdatePlaylistNotFound) Error() string {
	return fmt.Sprintf("[PUT /playlists/{uid}][%d] updatePlaylistNotFound  %+v", 404, o.Payload)
}
func (o *UpdatePlaylistNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdatePlaylistNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePlaylistInternalServerError creates a UpdatePlaylistInternalServerError with default headers values
func NewUpdatePlaylistInternalServerError() *UpdatePlaylistInternalServerError {
	return &UpdatePlaylistInternalServerError{}
}

/*
UpdatePlaylistInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type UpdatePlaylistInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdatePlaylistInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /playlists/{uid}][%d] updatePlaylistInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdatePlaylistInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdatePlaylistInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
