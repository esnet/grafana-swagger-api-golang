// Code generated by go-swagger; DO NOT EDIT.

package admin_provisioning

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// AdminProvisioningReloadNotificationsReader is a Reader for the AdminProvisioningReloadNotifications structure.
type AdminProvisioningReloadNotificationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminProvisioningReloadNotificationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminProvisioningReloadNotificationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminProvisioningReloadNotificationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAdminProvisioningReloadNotificationsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAdminProvisioningReloadNotificationsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAdminProvisioningReloadNotificationsOK creates a AdminProvisioningReloadNotificationsOK with default headers values
func NewAdminProvisioningReloadNotificationsOK() *AdminProvisioningReloadNotificationsOK {
	return &AdminProvisioningReloadNotificationsOK{}
}

/*
AdminProvisioningReloadNotificationsOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type AdminProvisioningReloadNotificationsOK struct {
	Payload *models.SuccessResponseBody
}

func (o *AdminProvisioningReloadNotificationsOK) Error() string {
	return fmt.Sprintf("[POST /admin/provisioning/notifications/reload][%d] adminProvisioningReloadNotificationsOK  %+v", 200, o.Payload)
}
func (o *AdminProvisioningReloadNotificationsOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *AdminProvisioningReloadNotificationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminProvisioningReloadNotificationsUnauthorized creates a AdminProvisioningReloadNotificationsUnauthorized with default headers values
func NewAdminProvisioningReloadNotificationsUnauthorized() *AdminProvisioningReloadNotificationsUnauthorized {
	return &AdminProvisioningReloadNotificationsUnauthorized{}
}

/*
AdminProvisioningReloadNotificationsUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type AdminProvisioningReloadNotificationsUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *AdminProvisioningReloadNotificationsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /admin/provisioning/notifications/reload][%d] adminProvisioningReloadNotificationsUnauthorized  %+v", 401, o.Payload)
}
func (o *AdminProvisioningReloadNotificationsUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *AdminProvisioningReloadNotificationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminProvisioningReloadNotificationsForbidden creates a AdminProvisioningReloadNotificationsForbidden with default headers values
func NewAdminProvisioningReloadNotificationsForbidden() *AdminProvisioningReloadNotificationsForbidden {
	return &AdminProvisioningReloadNotificationsForbidden{}
}

/*
AdminProvisioningReloadNotificationsForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type AdminProvisioningReloadNotificationsForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *AdminProvisioningReloadNotificationsForbidden) Error() string {
	return fmt.Sprintf("[POST /admin/provisioning/notifications/reload][%d] adminProvisioningReloadNotificationsForbidden  %+v", 403, o.Payload)
}
func (o *AdminProvisioningReloadNotificationsForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *AdminProvisioningReloadNotificationsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminProvisioningReloadNotificationsInternalServerError creates a AdminProvisioningReloadNotificationsInternalServerError with default headers values
func NewAdminProvisioningReloadNotificationsInternalServerError() *AdminProvisioningReloadNotificationsInternalServerError {
	return &AdminProvisioningReloadNotificationsInternalServerError{}
}

/*
AdminProvisioningReloadNotificationsInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type AdminProvisioningReloadNotificationsInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *AdminProvisioningReloadNotificationsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /admin/provisioning/notifications/reload][%d] adminProvisioningReloadNotificationsInternalServerError  %+v", 500, o.Payload)
}
func (o *AdminProvisioningReloadNotificationsInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *AdminProvisioningReloadNotificationsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
