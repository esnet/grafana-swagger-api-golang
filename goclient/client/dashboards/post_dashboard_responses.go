// Code generated by go-swagger; DO NOT EDIT.

package dashboards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// PostDashboardReader is a Reader for the PostDashboard structure.
type PostDashboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostDashboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostDashboardOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostDashboardBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostDashboardUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostDashboardForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostDashboardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPostDashboardPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPostDashboardUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostDashboardInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostDashboardOK creates a PostDashboardOK with default headers values
func NewPostDashboardOK() *PostDashboardOK {
	return &PostDashboardOK{}
}

/*
PostDashboardOK describes a response with status code 200, with default header values.

(empty)
*/
type PostDashboardOK struct {
	Payload *models.PostDashboardOKBody
}

func (o *PostDashboardOK) Error() string {
	return fmt.Sprintf("[POST /dashboards/db][%d] postDashboardOK  %+v", 200, o.Payload)
}
func (o *PostDashboardOK) GetPayload() *models.PostDashboardOKBody {
	return o.Payload
}

func (o *PostDashboardOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PostDashboardOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDashboardBadRequest creates a PostDashboardBadRequest with default headers values
func NewPostDashboardBadRequest() *PostDashboardBadRequest {
	return &PostDashboardBadRequest{}
}

/*
PostDashboardBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type PostDashboardBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *PostDashboardBadRequest) Error() string {
	return fmt.Sprintf("[POST /dashboards/db][%d] postDashboardBadRequest  %+v", 400, o.Payload)
}
func (o *PostDashboardBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PostDashboardBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDashboardUnauthorized creates a PostDashboardUnauthorized with default headers values
func NewPostDashboardUnauthorized() *PostDashboardUnauthorized {
	return &PostDashboardUnauthorized{}
}

/*
PostDashboardUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type PostDashboardUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *PostDashboardUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dashboards/db][%d] postDashboardUnauthorized  %+v", 401, o.Payload)
}
func (o *PostDashboardUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PostDashboardUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDashboardForbidden creates a PostDashboardForbidden with default headers values
func NewPostDashboardForbidden() *PostDashboardForbidden {
	return &PostDashboardForbidden{}
}

/*
PostDashboardForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type PostDashboardForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *PostDashboardForbidden) Error() string {
	return fmt.Sprintf("[POST /dashboards/db][%d] postDashboardForbidden  %+v", 403, o.Payload)
}
func (o *PostDashboardForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PostDashboardForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDashboardNotFound creates a PostDashboardNotFound with default headers values
func NewPostDashboardNotFound() *PostDashboardNotFound {
	return &PostDashboardNotFound{}
}

/*
PostDashboardNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type PostDashboardNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *PostDashboardNotFound) Error() string {
	return fmt.Sprintf("[POST /dashboards/db][%d] postDashboardNotFound  %+v", 404, o.Payload)
}
func (o *PostDashboardNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PostDashboardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDashboardPreconditionFailed creates a PostDashboardPreconditionFailed with default headers values
func NewPostDashboardPreconditionFailed() *PostDashboardPreconditionFailed {
	return &PostDashboardPreconditionFailed{}
}

/*
PostDashboardPreconditionFailed describes a response with status code 412, with default header values.

PreconditionFailedError
*/
type PostDashboardPreconditionFailed struct {
	Payload *models.ErrorResponseBody
}

func (o *PostDashboardPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /dashboards/db][%d] postDashboardPreconditionFailed  %+v", 412, o.Payload)
}
func (o *PostDashboardPreconditionFailed) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PostDashboardPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDashboardUnprocessableEntity creates a PostDashboardUnprocessableEntity with default headers values
func NewPostDashboardUnprocessableEntity() *PostDashboardUnprocessableEntity {
	return &PostDashboardUnprocessableEntity{}
}

/*
PostDashboardUnprocessableEntity describes a response with status code 422, with default header values.

UnprocessableEntityError
*/
type PostDashboardUnprocessableEntity struct {
	Payload *models.ErrorResponseBody
}

func (o *PostDashboardUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /dashboards/db][%d] postDashboardUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *PostDashboardUnprocessableEntity) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PostDashboardUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDashboardInternalServerError creates a PostDashboardInternalServerError with default headers values
func NewPostDashboardInternalServerError() *PostDashboardInternalServerError {
	return &PostDashboardInternalServerError{}
}

/*
PostDashboardInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type PostDashboardInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *PostDashboardInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dashboards/db][%d] postDashboardInternalServerError  %+v", 500, o.Payload)
}
func (o *PostDashboardInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *PostDashboardInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
