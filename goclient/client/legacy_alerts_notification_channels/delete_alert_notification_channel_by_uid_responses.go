// Code generated by go-swagger; DO NOT EDIT.

package legacy_alerts_notification_channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// DeleteAlertNotificationChannelByUIDReader is a Reader for the DeleteAlertNotificationChannelByUID structure.
type DeleteAlertNotificationChannelByUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAlertNotificationChannelByUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteAlertNotificationChannelByUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteAlertNotificationChannelByUIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteAlertNotificationChannelByUIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteAlertNotificationChannelByUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteAlertNotificationChannelByUIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteAlertNotificationChannelByUIDOK creates a DeleteAlertNotificationChannelByUIDOK with default headers values
func NewDeleteAlertNotificationChannelByUIDOK() *DeleteAlertNotificationChannelByUIDOK {
	return &DeleteAlertNotificationChannelByUIDOK{}
}

/*
DeleteAlertNotificationChannelByUIDOK describes a response with status code 200, with default header values.

(empty)
*/
type DeleteAlertNotificationChannelByUIDOK struct {
	Payload *models.DeleteAlertNotificationChannelByUIDOKBody
}

func (o *DeleteAlertNotificationChannelByUIDOK) Error() string {
	return fmt.Sprintf("[DELETE /alert-notifications/uid/{notification_channel_uid}][%d] deleteAlertNotificationChannelByUidOK  %+v", 200, o.Payload)
}
func (o *DeleteAlertNotificationChannelByUIDOK) GetPayload() *models.DeleteAlertNotificationChannelByUIDOKBody {
	return o.Payload
}

func (o *DeleteAlertNotificationChannelByUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteAlertNotificationChannelByUIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAlertNotificationChannelByUIDUnauthorized creates a DeleteAlertNotificationChannelByUIDUnauthorized with default headers values
func NewDeleteAlertNotificationChannelByUIDUnauthorized() *DeleteAlertNotificationChannelByUIDUnauthorized {
	return &DeleteAlertNotificationChannelByUIDUnauthorized{}
}

/*
DeleteAlertNotificationChannelByUIDUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type DeleteAlertNotificationChannelByUIDUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteAlertNotificationChannelByUIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /alert-notifications/uid/{notification_channel_uid}][%d] deleteAlertNotificationChannelByUidUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteAlertNotificationChannelByUIDUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteAlertNotificationChannelByUIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAlertNotificationChannelByUIDForbidden creates a DeleteAlertNotificationChannelByUIDForbidden with default headers values
func NewDeleteAlertNotificationChannelByUIDForbidden() *DeleteAlertNotificationChannelByUIDForbidden {
	return &DeleteAlertNotificationChannelByUIDForbidden{}
}

/*
DeleteAlertNotificationChannelByUIDForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type DeleteAlertNotificationChannelByUIDForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteAlertNotificationChannelByUIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /alert-notifications/uid/{notification_channel_uid}][%d] deleteAlertNotificationChannelByUidForbidden  %+v", 403, o.Payload)
}
func (o *DeleteAlertNotificationChannelByUIDForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteAlertNotificationChannelByUIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAlertNotificationChannelByUIDNotFound creates a DeleteAlertNotificationChannelByUIDNotFound with default headers values
func NewDeleteAlertNotificationChannelByUIDNotFound() *DeleteAlertNotificationChannelByUIDNotFound {
	return &DeleteAlertNotificationChannelByUIDNotFound{}
}

/*
DeleteAlertNotificationChannelByUIDNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type DeleteAlertNotificationChannelByUIDNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteAlertNotificationChannelByUIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /alert-notifications/uid/{notification_channel_uid}][%d] deleteAlertNotificationChannelByUidNotFound  %+v", 404, o.Payload)
}
func (o *DeleteAlertNotificationChannelByUIDNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteAlertNotificationChannelByUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAlertNotificationChannelByUIDInternalServerError creates a DeleteAlertNotificationChannelByUIDInternalServerError with default headers values
func NewDeleteAlertNotificationChannelByUIDInternalServerError() *DeleteAlertNotificationChannelByUIDInternalServerError {
	return &DeleteAlertNotificationChannelByUIDInternalServerError{}
}

/*
DeleteAlertNotificationChannelByUIDInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type DeleteAlertNotificationChannelByUIDInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteAlertNotificationChannelByUIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /alert-notifications/uid/{notification_channel_uid}][%d] deleteAlertNotificationChannelByUidInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteAlertNotificationChannelByUIDInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteAlertNotificationChannelByUIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
