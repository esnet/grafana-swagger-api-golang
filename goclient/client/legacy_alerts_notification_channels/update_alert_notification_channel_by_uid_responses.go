// Code generated by go-swagger; DO NOT EDIT.

package legacy_alerts_notification_channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// UpdateAlertNotificationChannelByUIDReader is a Reader for the UpdateAlertNotificationChannelByUID structure.
type UpdateAlertNotificationChannelByUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAlertNotificationChannelByUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAlertNotificationChannelByUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateAlertNotificationChannelByUIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAlertNotificationChannelByUIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAlertNotificationChannelByUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAlertNotificationChannelByUIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateAlertNotificationChannelByUIDOK creates a UpdateAlertNotificationChannelByUIDOK with default headers values
func NewUpdateAlertNotificationChannelByUIDOK() *UpdateAlertNotificationChannelByUIDOK {
	return &UpdateAlertNotificationChannelByUIDOK{}
}

/*
UpdateAlertNotificationChannelByUIDOK describes a response with status code 200, with default header values.

(empty)
*/
type UpdateAlertNotificationChannelByUIDOK struct {
	Payload *models.AlertNotification
}

func (o *UpdateAlertNotificationChannelByUIDOK) Error() string {
	return fmt.Sprintf("[PUT /alert-notifications/uid/{notification_channel_uid}][%d] updateAlertNotificationChannelByUidOK  %+v", 200, o.Payload)
}
func (o *UpdateAlertNotificationChannelByUIDOK) GetPayload() *models.AlertNotification {
	return o.Payload
}

func (o *UpdateAlertNotificationChannelByUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AlertNotification)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertNotificationChannelByUIDUnauthorized creates a UpdateAlertNotificationChannelByUIDUnauthorized with default headers values
func NewUpdateAlertNotificationChannelByUIDUnauthorized() *UpdateAlertNotificationChannelByUIDUnauthorized {
	return &UpdateAlertNotificationChannelByUIDUnauthorized{}
}

/*
UpdateAlertNotificationChannelByUIDUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type UpdateAlertNotificationChannelByUIDUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateAlertNotificationChannelByUIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /alert-notifications/uid/{notification_channel_uid}][%d] updateAlertNotificationChannelByUidUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateAlertNotificationChannelByUIDUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateAlertNotificationChannelByUIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertNotificationChannelByUIDForbidden creates a UpdateAlertNotificationChannelByUIDForbidden with default headers values
func NewUpdateAlertNotificationChannelByUIDForbidden() *UpdateAlertNotificationChannelByUIDForbidden {
	return &UpdateAlertNotificationChannelByUIDForbidden{}
}

/*
UpdateAlertNotificationChannelByUIDForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type UpdateAlertNotificationChannelByUIDForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateAlertNotificationChannelByUIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /alert-notifications/uid/{notification_channel_uid}][%d] updateAlertNotificationChannelByUidForbidden  %+v", 403, o.Payload)
}
func (o *UpdateAlertNotificationChannelByUIDForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateAlertNotificationChannelByUIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertNotificationChannelByUIDNotFound creates a UpdateAlertNotificationChannelByUIDNotFound with default headers values
func NewUpdateAlertNotificationChannelByUIDNotFound() *UpdateAlertNotificationChannelByUIDNotFound {
	return &UpdateAlertNotificationChannelByUIDNotFound{}
}

/*
UpdateAlertNotificationChannelByUIDNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type UpdateAlertNotificationChannelByUIDNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateAlertNotificationChannelByUIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /alert-notifications/uid/{notification_channel_uid}][%d] updateAlertNotificationChannelByUidNotFound  %+v", 404, o.Payload)
}
func (o *UpdateAlertNotificationChannelByUIDNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateAlertNotificationChannelByUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertNotificationChannelByUIDInternalServerError creates a UpdateAlertNotificationChannelByUIDInternalServerError with default headers values
func NewUpdateAlertNotificationChannelByUIDInternalServerError() *UpdateAlertNotificationChannelByUIDInternalServerError {
	return &UpdateAlertNotificationChannelByUIDInternalServerError{}
}

/*
UpdateAlertNotificationChannelByUIDInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type UpdateAlertNotificationChannelByUIDInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateAlertNotificationChannelByUIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /alert-notifications/uid/{notification_channel_uid}][%d] updateAlertNotificationChannelByUidInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateAlertNotificationChannelByUIDInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateAlertNotificationChannelByUIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
