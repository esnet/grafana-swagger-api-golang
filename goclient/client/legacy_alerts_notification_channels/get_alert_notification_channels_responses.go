// Code generated by go-swagger; DO NOT EDIT.

package legacy_alerts_notification_channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// GetAlertNotificationChannelsReader is a Reader for the GetAlertNotificationChannels structure.
type GetAlertNotificationChannelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAlertNotificationChannelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAlertNotificationChannelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAlertNotificationChannelsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAlertNotificationChannelsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAlertNotificationChannelsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAlertNotificationChannelsOK creates a GetAlertNotificationChannelsOK with default headers values
func NewGetAlertNotificationChannelsOK() *GetAlertNotificationChannelsOK {
	return &GetAlertNotificationChannelsOK{}
}

/*
GetAlertNotificationChannelsOK describes a response with status code 200, with default header values.

(empty)
*/
type GetAlertNotificationChannelsOK struct {
	Payload []*models.AlertNotification
}

func (o *GetAlertNotificationChannelsOK) Error() string {
	return fmt.Sprintf("[GET /alert-notifications][%d] getAlertNotificationChannelsOK  %+v", 200, o.Payload)
}
func (o *GetAlertNotificationChannelsOK) GetPayload() []*models.AlertNotification {
	return o.Payload
}

func (o *GetAlertNotificationChannelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAlertNotificationChannelsUnauthorized creates a GetAlertNotificationChannelsUnauthorized with default headers values
func NewGetAlertNotificationChannelsUnauthorized() *GetAlertNotificationChannelsUnauthorized {
	return &GetAlertNotificationChannelsUnauthorized{}
}

/*
GetAlertNotificationChannelsUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type GetAlertNotificationChannelsUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *GetAlertNotificationChannelsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /alert-notifications][%d] getAlertNotificationChannelsUnauthorized  %+v", 401, o.Payload)
}
func (o *GetAlertNotificationChannelsUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetAlertNotificationChannelsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAlertNotificationChannelsForbidden creates a GetAlertNotificationChannelsForbidden with default headers values
func NewGetAlertNotificationChannelsForbidden() *GetAlertNotificationChannelsForbidden {
	return &GetAlertNotificationChannelsForbidden{}
}

/*
GetAlertNotificationChannelsForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type GetAlertNotificationChannelsForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *GetAlertNotificationChannelsForbidden) Error() string {
	return fmt.Sprintf("[GET /alert-notifications][%d] getAlertNotificationChannelsForbidden  %+v", 403, o.Payload)
}
func (o *GetAlertNotificationChannelsForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetAlertNotificationChannelsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAlertNotificationChannelsInternalServerError creates a GetAlertNotificationChannelsInternalServerError with default headers values
func NewGetAlertNotificationChannelsInternalServerError() *GetAlertNotificationChannelsInternalServerError {
	return &GetAlertNotificationChannelsInternalServerError{}
}

/*
GetAlertNotificationChannelsInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type GetAlertNotificationChannelsInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *GetAlertNotificationChannelsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /alert-notifications][%d] getAlertNotificationChannelsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetAlertNotificationChannelsInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetAlertNotificationChannelsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
