// Code generated by go-swagger; DO NOT EDIT.

package datasources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// GetDataSourceByIDReader is a Reader for the GetDataSourceByID structure.
type GetDataSourceByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDataSourceByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDataSourceByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDataSourceByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDataSourceByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDataSourceByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDataSourceByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDataSourceByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDataSourceByIDOK creates a GetDataSourceByIDOK with default headers values
func NewGetDataSourceByIDOK() *GetDataSourceByIDOK {
	return &GetDataSourceByIDOK{}
}

/*
GetDataSourceByIDOK describes a response with status code 200, with default header values.

(empty)
*/
type GetDataSourceByIDOK struct {
	Payload *models.DataSource
}

func (o *GetDataSourceByIDOK) Error() string {
	return fmt.Sprintf("[GET /datasources/{id}][%d] getDataSourceByIdOK  %+v", 200, o.Payload)
}
func (o *GetDataSourceByIDOK) GetPayload() *models.DataSource {
	return o.Payload
}

func (o *GetDataSourceByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DataSource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataSourceByIDBadRequest creates a GetDataSourceByIDBadRequest with default headers values
func NewGetDataSourceByIDBadRequest() *GetDataSourceByIDBadRequest {
	return &GetDataSourceByIDBadRequest{}
}

/*
GetDataSourceByIDBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type GetDataSourceByIDBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *GetDataSourceByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /datasources/{id}][%d] getDataSourceByIdBadRequest  %+v", 400, o.Payload)
}
func (o *GetDataSourceByIDBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetDataSourceByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataSourceByIDUnauthorized creates a GetDataSourceByIDUnauthorized with default headers values
func NewGetDataSourceByIDUnauthorized() *GetDataSourceByIDUnauthorized {
	return &GetDataSourceByIDUnauthorized{}
}

/*
GetDataSourceByIDUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type GetDataSourceByIDUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *GetDataSourceByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /datasources/{id}][%d] getDataSourceByIdUnauthorized  %+v", 401, o.Payload)
}
func (o *GetDataSourceByIDUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetDataSourceByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataSourceByIDForbidden creates a GetDataSourceByIDForbidden with default headers values
func NewGetDataSourceByIDForbidden() *GetDataSourceByIDForbidden {
	return &GetDataSourceByIDForbidden{}
}

/*
GetDataSourceByIDForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type GetDataSourceByIDForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *GetDataSourceByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /datasources/{id}][%d] getDataSourceByIdForbidden  %+v", 403, o.Payload)
}
func (o *GetDataSourceByIDForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetDataSourceByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataSourceByIDNotFound creates a GetDataSourceByIDNotFound with default headers values
func NewGetDataSourceByIDNotFound() *GetDataSourceByIDNotFound {
	return &GetDataSourceByIDNotFound{}
}

/*
GetDataSourceByIDNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type GetDataSourceByIDNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *GetDataSourceByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /datasources/{id}][%d] getDataSourceByIdNotFound  %+v", 404, o.Payload)
}
func (o *GetDataSourceByIDNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetDataSourceByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataSourceByIDInternalServerError creates a GetDataSourceByIDInternalServerError with default headers values
func NewGetDataSourceByIDInternalServerError() *GetDataSourceByIDInternalServerError {
	return &GetDataSourceByIDInternalServerError{}
}

/*
GetDataSourceByIDInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type GetDataSourceByIDInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *GetDataSourceByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /datasources/{id}][%d] getDataSourceByIdInternalServerError  %+v", 500, o.Payload)
}
func (o *GetDataSourceByIDInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetDataSourceByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
