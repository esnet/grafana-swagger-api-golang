// Code generated by go-swagger; DO NOT EDIT.

package datasources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// UpdateDataSourceByIDReader is a Reader for the UpdateDataSourceByID structure.
type UpdateDataSourceByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDataSourceByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDataSourceByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateDataSourceByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateDataSourceByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDataSourceByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDataSourceByIDOK creates a UpdateDataSourceByIDOK with default headers values
func NewUpdateDataSourceByIDOK() *UpdateDataSourceByIDOK {
	return &UpdateDataSourceByIDOK{}
}

/*
UpdateDataSourceByIDOK describes a response with status code 200, with default header values.

(empty)
*/
type UpdateDataSourceByIDOK struct {
	Payload *models.UpdateDataSourceByIDOKBody
}

func (o *UpdateDataSourceByIDOK) Error() string {
	return fmt.Sprintf("[PUT /datasources/{id}][%d] updateDataSourceByIdOK  %+v", 200, o.Payload)
}
func (o *UpdateDataSourceByIDOK) GetPayload() *models.UpdateDataSourceByIDOKBody {
	return o.Payload
}

func (o *UpdateDataSourceByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateDataSourceByIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDataSourceByIDUnauthorized creates a UpdateDataSourceByIDUnauthorized with default headers values
func NewUpdateDataSourceByIDUnauthorized() *UpdateDataSourceByIDUnauthorized {
	return &UpdateDataSourceByIDUnauthorized{}
}

/*
UpdateDataSourceByIDUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type UpdateDataSourceByIDUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateDataSourceByIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /datasources/{id}][%d] updateDataSourceByIdUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateDataSourceByIDUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateDataSourceByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDataSourceByIDForbidden creates a UpdateDataSourceByIDForbidden with default headers values
func NewUpdateDataSourceByIDForbidden() *UpdateDataSourceByIDForbidden {
	return &UpdateDataSourceByIDForbidden{}
}

/*
UpdateDataSourceByIDForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type UpdateDataSourceByIDForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateDataSourceByIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /datasources/{id}][%d] updateDataSourceByIdForbidden  %+v", 403, o.Payload)
}
func (o *UpdateDataSourceByIDForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateDataSourceByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDataSourceByIDInternalServerError creates a UpdateDataSourceByIDInternalServerError with default headers values
func NewUpdateDataSourceByIDInternalServerError() *UpdateDataSourceByIDInternalServerError {
	return &UpdateDataSourceByIDInternalServerError{}
}

/*
UpdateDataSourceByIDInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type UpdateDataSourceByIDInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateDataSourceByIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /datasources/{id}][%d] updateDataSourceByIdInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateDataSourceByIDInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateDataSourceByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
