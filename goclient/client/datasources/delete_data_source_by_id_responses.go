// Code generated by go-swagger; DO NOT EDIT.

package datasources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// DeleteDataSourceByIDReader is a Reader for the DeleteDataSourceByID structure.
type DeleteDataSourceByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDataSourceByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteDataSourceByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteDataSourceByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteDataSourceByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteDataSourceByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteDataSourceByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteDataSourceByIDOK creates a DeleteDataSourceByIDOK with default headers values
func NewDeleteDataSourceByIDOK() *DeleteDataSourceByIDOK {
	return &DeleteDataSourceByIDOK{}
}

/*
DeleteDataSourceByIDOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type DeleteDataSourceByIDOK struct {
	Payload *models.SuccessResponseBody
}

func (o *DeleteDataSourceByIDOK) Error() string {
	return fmt.Sprintf("[DELETE /datasources/{id}][%d] deleteDataSourceByIdOK  %+v", 200, o.Payload)
}
func (o *DeleteDataSourceByIDOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *DeleteDataSourceByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDataSourceByIDUnauthorized creates a DeleteDataSourceByIDUnauthorized with default headers values
func NewDeleteDataSourceByIDUnauthorized() *DeleteDataSourceByIDUnauthorized {
	return &DeleteDataSourceByIDUnauthorized{}
}

/*
DeleteDataSourceByIDUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type DeleteDataSourceByIDUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteDataSourceByIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /datasources/{id}][%d] deleteDataSourceByIdUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteDataSourceByIDUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteDataSourceByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDataSourceByIDForbidden creates a DeleteDataSourceByIDForbidden with default headers values
func NewDeleteDataSourceByIDForbidden() *DeleteDataSourceByIDForbidden {
	return &DeleteDataSourceByIDForbidden{}
}

/*
DeleteDataSourceByIDForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type DeleteDataSourceByIDForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteDataSourceByIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /datasources/{id}][%d] deleteDataSourceByIdForbidden  %+v", 403, o.Payload)
}
func (o *DeleteDataSourceByIDForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteDataSourceByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDataSourceByIDNotFound creates a DeleteDataSourceByIDNotFound with default headers values
func NewDeleteDataSourceByIDNotFound() *DeleteDataSourceByIDNotFound {
	return &DeleteDataSourceByIDNotFound{}
}

/*
DeleteDataSourceByIDNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type DeleteDataSourceByIDNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteDataSourceByIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /datasources/{id}][%d] deleteDataSourceByIdNotFound  %+v", 404, o.Payload)
}
func (o *DeleteDataSourceByIDNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteDataSourceByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDataSourceByIDInternalServerError creates a DeleteDataSourceByIDInternalServerError with default headers values
func NewDeleteDataSourceByIDInternalServerError() *DeleteDataSourceByIDInternalServerError {
	return &DeleteDataSourceByIDInternalServerError{}
}

/*
DeleteDataSourceByIDInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type DeleteDataSourceByIDInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteDataSourceByIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /datasources/{id}][%d] deleteDataSourceByIdInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteDataSourceByIDInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteDataSourceByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
