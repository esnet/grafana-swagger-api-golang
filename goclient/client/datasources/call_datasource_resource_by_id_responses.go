// Code generated by go-swagger; DO NOT EDIT.

package datasources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// CallDatasourceResourceByIDReader is a Reader for the CallDatasourceResourceByID structure.
type CallDatasourceResourceByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CallDatasourceResourceByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCallDatasourceResourceByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCallDatasourceResourceByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCallDatasourceResourceByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCallDatasourceResourceByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCallDatasourceResourceByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCallDatasourceResourceByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCallDatasourceResourceByIDOK creates a CallDatasourceResourceByIDOK with default headers values
func NewCallDatasourceResourceByIDOK() *CallDatasourceResourceByIDOK {
	return &CallDatasourceResourceByIDOK{}
}

/*
CallDatasourceResourceByIDOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type CallDatasourceResourceByIDOK struct {
	Payload *models.SuccessResponseBody
}

func (o *CallDatasourceResourceByIDOK) Error() string {
	return fmt.Sprintf("[GET /datasources/{id}/resources/{datasource_proxy_route}][%d] callDatasourceResourceByIdOK  %+v", 200, o.Payload)
}
func (o *CallDatasourceResourceByIDOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *CallDatasourceResourceByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCallDatasourceResourceByIDBadRequest creates a CallDatasourceResourceByIDBadRequest with default headers values
func NewCallDatasourceResourceByIDBadRequest() *CallDatasourceResourceByIDBadRequest {
	return &CallDatasourceResourceByIDBadRequest{}
}

/*
CallDatasourceResourceByIDBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type CallDatasourceResourceByIDBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *CallDatasourceResourceByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /datasources/{id}/resources/{datasource_proxy_route}][%d] callDatasourceResourceByIdBadRequest  %+v", 400, o.Payload)
}
func (o *CallDatasourceResourceByIDBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *CallDatasourceResourceByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCallDatasourceResourceByIDUnauthorized creates a CallDatasourceResourceByIDUnauthorized with default headers values
func NewCallDatasourceResourceByIDUnauthorized() *CallDatasourceResourceByIDUnauthorized {
	return &CallDatasourceResourceByIDUnauthorized{}
}

/*
CallDatasourceResourceByIDUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type CallDatasourceResourceByIDUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *CallDatasourceResourceByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /datasources/{id}/resources/{datasource_proxy_route}][%d] callDatasourceResourceByIdUnauthorized  %+v", 401, o.Payload)
}
func (o *CallDatasourceResourceByIDUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *CallDatasourceResourceByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCallDatasourceResourceByIDForbidden creates a CallDatasourceResourceByIDForbidden with default headers values
func NewCallDatasourceResourceByIDForbidden() *CallDatasourceResourceByIDForbidden {
	return &CallDatasourceResourceByIDForbidden{}
}

/*
CallDatasourceResourceByIDForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type CallDatasourceResourceByIDForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *CallDatasourceResourceByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /datasources/{id}/resources/{datasource_proxy_route}][%d] callDatasourceResourceByIdForbidden  %+v", 403, o.Payload)
}
func (o *CallDatasourceResourceByIDForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *CallDatasourceResourceByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCallDatasourceResourceByIDNotFound creates a CallDatasourceResourceByIDNotFound with default headers values
func NewCallDatasourceResourceByIDNotFound() *CallDatasourceResourceByIDNotFound {
	return &CallDatasourceResourceByIDNotFound{}
}

/*
CallDatasourceResourceByIDNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type CallDatasourceResourceByIDNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *CallDatasourceResourceByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /datasources/{id}/resources/{datasource_proxy_route}][%d] callDatasourceResourceByIdNotFound  %+v", 404, o.Payload)
}
func (o *CallDatasourceResourceByIDNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *CallDatasourceResourceByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCallDatasourceResourceByIDInternalServerError creates a CallDatasourceResourceByIDInternalServerError with default headers values
func NewCallDatasourceResourceByIDInternalServerError() *CallDatasourceResourceByIDInternalServerError {
	return &CallDatasourceResourceByIDInternalServerError{}
}

/*
CallDatasourceResourceByIDInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type CallDatasourceResourceByIDInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *CallDatasourceResourceByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /datasources/{id}/resources/{datasource_proxy_route}][%d] callDatasourceResourceByIdInternalServerError  %+v", 500, o.Payload)
}
func (o *CallDatasourceResourceByIDInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *CallDatasourceResourceByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
