// Code generated by go-swagger; DO NOT EDIT.

package datasources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// GetDataSourceByUIDReader is a Reader for the GetDataSourceByUID structure.
type GetDataSourceByUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDataSourceByUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDataSourceByUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDataSourceByUIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDataSourceByUIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDataSourceByUIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDataSourceByUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDataSourceByUIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDataSourceByUIDOK creates a GetDataSourceByUIDOK with default headers values
func NewGetDataSourceByUIDOK() *GetDataSourceByUIDOK {
	return &GetDataSourceByUIDOK{}
}

/*
GetDataSourceByUIDOK describes a response with status code 200, with default header values.

(empty)
*/
type GetDataSourceByUIDOK struct {
	Payload *models.DataSource
}

func (o *GetDataSourceByUIDOK) Error() string {
	return fmt.Sprintf("[GET /datasources/uid/{uid}][%d] getDataSourceByUidOK  %+v", 200, o.Payload)
}
func (o *GetDataSourceByUIDOK) GetPayload() *models.DataSource {
	return o.Payload
}

func (o *GetDataSourceByUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DataSource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataSourceByUIDBadRequest creates a GetDataSourceByUIDBadRequest with default headers values
func NewGetDataSourceByUIDBadRequest() *GetDataSourceByUIDBadRequest {
	return &GetDataSourceByUIDBadRequest{}
}

/*
GetDataSourceByUIDBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type GetDataSourceByUIDBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *GetDataSourceByUIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /datasources/uid/{uid}][%d] getDataSourceByUidBadRequest  %+v", 400, o.Payload)
}
func (o *GetDataSourceByUIDBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetDataSourceByUIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataSourceByUIDUnauthorized creates a GetDataSourceByUIDUnauthorized with default headers values
func NewGetDataSourceByUIDUnauthorized() *GetDataSourceByUIDUnauthorized {
	return &GetDataSourceByUIDUnauthorized{}
}

/*
GetDataSourceByUIDUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type GetDataSourceByUIDUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *GetDataSourceByUIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /datasources/uid/{uid}][%d] getDataSourceByUidUnauthorized  %+v", 401, o.Payload)
}
func (o *GetDataSourceByUIDUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetDataSourceByUIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataSourceByUIDForbidden creates a GetDataSourceByUIDForbidden with default headers values
func NewGetDataSourceByUIDForbidden() *GetDataSourceByUIDForbidden {
	return &GetDataSourceByUIDForbidden{}
}

/*
GetDataSourceByUIDForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type GetDataSourceByUIDForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *GetDataSourceByUIDForbidden) Error() string {
	return fmt.Sprintf("[GET /datasources/uid/{uid}][%d] getDataSourceByUidForbidden  %+v", 403, o.Payload)
}
func (o *GetDataSourceByUIDForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetDataSourceByUIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataSourceByUIDNotFound creates a GetDataSourceByUIDNotFound with default headers values
func NewGetDataSourceByUIDNotFound() *GetDataSourceByUIDNotFound {
	return &GetDataSourceByUIDNotFound{}
}

/*
GetDataSourceByUIDNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type GetDataSourceByUIDNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *GetDataSourceByUIDNotFound) Error() string {
	return fmt.Sprintf("[GET /datasources/uid/{uid}][%d] getDataSourceByUidNotFound  %+v", 404, o.Payload)
}
func (o *GetDataSourceByUIDNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetDataSourceByUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataSourceByUIDInternalServerError creates a GetDataSourceByUIDInternalServerError with default headers values
func NewGetDataSourceByUIDInternalServerError() *GetDataSourceByUIDInternalServerError {
	return &GetDataSourceByUIDInternalServerError{}
}

/*
GetDataSourceByUIDInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type GetDataSourceByUIDInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *GetDataSourceByUIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /datasources/uid/{uid}][%d] getDataSourceByUidInternalServerError  %+v", 500, o.Payload)
}
func (o *GetDataSourceByUIDInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetDataSourceByUIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
