// Code generated by go-swagger; DO NOT EDIT.

package datasources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// DeleteDataSourceByUIDReader is a Reader for the DeleteDataSourceByUID structure.
type DeleteDataSourceByUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteDataSourceByUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteDataSourceByUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteDataSourceByUIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteDataSourceByUIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteDataSourceByUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteDataSourceByUIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteDataSourceByUIDOK creates a DeleteDataSourceByUIDOK with default headers values
func NewDeleteDataSourceByUIDOK() *DeleteDataSourceByUIDOK {
	return &DeleteDataSourceByUIDOK{}
}

/*
DeleteDataSourceByUIDOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type DeleteDataSourceByUIDOK struct {
	Payload *models.SuccessResponseBody
}

func (o *DeleteDataSourceByUIDOK) Error() string {
	return fmt.Sprintf("[DELETE /datasources/uid/{uid}][%d] deleteDataSourceByUidOK  %+v", 200, o.Payload)
}
func (o *DeleteDataSourceByUIDOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *DeleteDataSourceByUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDataSourceByUIDUnauthorized creates a DeleteDataSourceByUIDUnauthorized with default headers values
func NewDeleteDataSourceByUIDUnauthorized() *DeleteDataSourceByUIDUnauthorized {
	return &DeleteDataSourceByUIDUnauthorized{}
}

/*
DeleteDataSourceByUIDUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type DeleteDataSourceByUIDUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteDataSourceByUIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /datasources/uid/{uid}][%d] deleteDataSourceByUidUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteDataSourceByUIDUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteDataSourceByUIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDataSourceByUIDForbidden creates a DeleteDataSourceByUIDForbidden with default headers values
func NewDeleteDataSourceByUIDForbidden() *DeleteDataSourceByUIDForbidden {
	return &DeleteDataSourceByUIDForbidden{}
}

/*
DeleteDataSourceByUIDForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type DeleteDataSourceByUIDForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteDataSourceByUIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /datasources/uid/{uid}][%d] deleteDataSourceByUidForbidden  %+v", 403, o.Payload)
}
func (o *DeleteDataSourceByUIDForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteDataSourceByUIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDataSourceByUIDNotFound creates a DeleteDataSourceByUIDNotFound with default headers values
func NewDeleteDataSourceByUIDNotFound() *DeleteDataSourceByUIDNotFound {
	return &DeleteDataSourceByUIDNotFound{}
}

/*
DeleteDataSourceByUIDNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type DeleteDataSourceByUIDNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteDataSourceByUIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /datasources/uid/{uid}][%d] deleteDataSourceByUidNotFound  %+v", 404, o.Payload)
}
func (o *DeleteDataSourceByUIDNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteDataSourceByUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteDataSourceByUIDInternalServerError creates a DeleteDataSourceByUIDInternalServerError with default headers values
func NewDeleteDataSourceByUIDInternalServerError() *DeleteDataSourceByUIDInternalServerError {
	return &DeleteDataSourceByUIDInternalServerError{}
}

/*
DeleteDataSourceByUIDInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type DeleteDataSourceByUIDInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteDataSourceByUIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /datasources/uid/{uid}][%d] deleteDataSourceByUidInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteDataSourceByUIDInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteDataSourceByUIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
