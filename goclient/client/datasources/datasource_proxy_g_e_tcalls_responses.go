// Code generated by go-swagger; DO NOT EDIT.

package datasources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// DatasourceProxyGETcallsReader is a Reader for the DatasourceProxyGETcalls structure.
type DatasourceProxyGETcallsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DatasourceProxyGETcallsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDatasourceProxyGETcallsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDatasourceProxyGETcallsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDatasourceProxyGETcallsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDatasourceProxyGETcallsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDatasourceProxyGETcallsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDatasourceProxyGETcallsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDatasourceProxyGETcallsOK creates a DatasourceProxyGETcallsOK with default headers values
func NewDatasourceProxyGETcallsOK() *DatasourceProxyGETcallsOK {
	return &DatasourceProxyGETcallsOK{}
}

/*
DatasourceProxyGETcallsOK describes a response with status code 200, with default header values.

(empty)
*/
type DatasourceProxyGETcallsOK struct {
}

func (o *DatasourceProxyGETcallsOK) Error() string {
	return fmt.Sprintf("[GET /datasources/proxy/{id}/{datasource_proxy_route}][%d] datasourceProxyGETcallsOK ", 200)
}

func (o *DatasourceProxyGETcallsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDatasourceProxyGETcallsBadRequest creates a DatasourceProxyGETcallsBadRequest with default headers values
func NewDatasourceProxyGETcallsBadRequest() *DatasourceProxyGETcallsBadRequest {
	return &DatasourceProxyGETcallsBadRequest{}
}

/*
DatasourceProxyGETcallsBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type DatasourceProxyGETcallsBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *DatasourceProxyGETcallsBadRequest) Error() string {
	return fmt.Sprintf("[GET /datasources/proxy/{id}/{datasource_proxy_route}][%d] datasourceProxyGETcallsBadRequest  %+v", 400, o.Payload)
}
func (o *DatasourceProxyGETcallsBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DatasourceProxyGETcallsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatasourceProxyGETcallsUnauthorized creates a DatasourceProxyGETcallsUnauthorized with default headers values
func NewDatasourceProxyGETcallsUnauthorized() *DatasourceProxyGETcallsUnauthorized {
	return &DatasourceProxyGETcallsUnauthorized{}
}

/*
DatasourceProxyGETcallsUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type DatasourceProxyGETcallsUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *DatasourceProxyGETcallsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /datasources/proxy/{id}/{datasource_proxy_route}][%d] datasourceProxyGETcallsUnauthorized  %+v", 401, o.Payload)
}
func (o *DatasourceProxyGETcallsUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DatasourceProxyGETcallsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatasourceProxyGETcallsForbidden creates a DatasourceProxyGETcallsForbidden with default headers values
func NewDatasourceProxyGETcallsForbidden() *DatasourceProxyGETcallsForbidden {
	return &DatasourceProxyGETcallsForbidden{}
}

/*
DatasourceProxyGETcallsForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type DatasourceProxyGETcallsForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *DatasourceProxyGETcallsForbidden) Error() string {
	return fmt.Sprintf("[GET /datasources/proxy/{id}/{datasource_proxy_route}][%d] datasourceProxyGETcallsForbidden  %+v", 403, o.Payload)
}
func (o *DatasourceProxyGETcallsForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DatasourceProxyGETcallsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatasourceProxyGETcallsNotFound creates a DatasourceProxyGETcallsNotFound with default headers values
func NewDatasourceProxyGETcallsNotFound() *DatasourceProxyGETcallsNotFound {
	return &DatasourceProxyGETcallsNotFound{}
}

/*
DatasourceProxyGETcallsNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type DatasourceProxyGETcallsNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *DatasourceProxyGETcallsNotFound) Error() string {
	return fmt.Sprintf("[GET /datasources/proxy/{id}/{datasource_proxy_route}][%d] datasourceProxyGETcallsNotFound  %+v", 404, o.Payload)
}
func (o *DatasourceProxyGETcallsNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DatasourceProxyGETcallsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatasourceProxyGETcallsInternalServerError creates a DatasourceProxyGETcallsInternalServerError with default headers values
func NewDatasourceProxyGETcallsInternalServerError() *DatasourceProxyGETcallsInternalServerError {
	return &DatasourceProxyGETcallsInternalServerError{}
}

/*
DatasourceProxyGETcallsInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type DatasourceProxyGETcallsInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *DatasourceProxyGETcallsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /datasources/proxy/{id}/{datasource_proxy_route}][%d] datasourceProxyGETcallsInternalServerError  %+v", 500, o.Payload)
}
func (o *DatasourceProxyGETcallsInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DatasourceProxyGETcallsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
