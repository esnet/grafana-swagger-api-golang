// Code generated by go-swagger; DO NOT EDIT.

package dashboard_versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// GetDashboardVersionByUIDReader is a Reader for the GetDashboardVersionByUID structure.
type GetDashboardVersionByUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDashboardVersionByUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDashboardVersionByUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDashboardVersionByUIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDashboardVersionByUIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDashboardVersionByUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDashboardVersionByUIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDashboardVersionByUIDOK creates a GetDashboardVersionByUIDOK with default headers values
func NewGetDashboardVersionByUIDOK() *GetDashboardVersionByUIDOK {
	return &GetDashboardVersionByUIDOK{}
}

/*
GetDashboardVersionByUIDOK describes a response with status code 200, with default header values.

(empty)
*/
type GetDashboardVersionByUIDOK struct {
	Payload *models.DashboardVersionMeta
}

func (o *GetDashboardVersionByUIDOK) Error() string {
	return fmt.Sprintf("[GET /dashboards/uid/{uid}/versions/{DashboardVersionID}][%d] getDashboardVersionByUidOK  %+v", 200, o.Payload)
}
func (o *GetDashboardVersionByUIDOK) GetPayload() *models.DashboardVersionMeta {
	return o.Payload
}

func (o *GetDashboardVersionByUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DashboardVersionMeta)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDashboardVersionByUIDUnauthorized creates a GetDashboardVersionByUIDUnauthorized with default headers values
func NewGetDashboardVersionByUIDUnauthorized() *GetDashboardVersionByUIDUnauthorized {
	return &GetDashboardVersionByUIDUnauthorized{}
}

/*
GetDashboardVersionByUIDUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type GetDashboardVersionByUIDUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *GetDashboardVersionByUIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dashboards/uid/{uid}/versions/{DashboardVersionID}][%d] getDashboardVersionByUidUnauthorized  %+v", 401, o.Payload)
}
func (o *GetDashboardVersionByUIDUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetDashboardVersionByUIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDashboardVersionByUIDForbidden creates a GetDashboardVersionByUIDForbidden with default headers values
func NewGetDashboardVersionByUIDForbidden() *GetDashboardVersionByUIDForbidden {
	return &GetDashboardVersionByUIDForbidden{}
}

/*
GetDashboardVersionByUIDForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type GetDashboardVersionByUIDForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *GetDashboardVersionByUIDForbidden) Error() string {
	return fmt.Sprintf("[GET /dashboards/uid/{uid}/versions/{DashboardVersionID}][%d] getDashboardVersionByUidForbidden  %+v", 403, o.Payload)
}
func (o *GetDashboardVersionByUIDForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetDashboardVersionByUIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDashboardVersionByUIDNotFound creates a GetDashboardVersionByUIDNotFound with default headers values
func NewGetDashboardVersionByUIDNotFound() *GetDashboardVersionByUIDNotFound {
	return &GetDashboardVersionByUIDNotFound{}
}

/*
GetDashboardVersionByUIDNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type GetDashboardVersionByUIDNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *GetDashboardVersionByUIDNotFound) Error() string {
	return fmt.Sprintf("[GET /dashboards/uid/{uid}/versions/{DashboardVersionID}][%d] getDashboardVersionByUidNotFound  %+v", 404, o.Payload)
}
func (o *GetDashboardVersionByUIDNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetDashboardVersionByUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDashboardVersionByUIDInternalServerError creates a GetDashboardVersionByUIDInternalServerError with default headers values
func NewGetDashboardVersionByUIDInternalServerError() *GetDashboardVersionByUIDInternalServerError {
	return &GetDashboardVersionByUIDInternalServerError{}
}

/*
GetDashboardVersionByUIDInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type GetDashboardVersionByUIDInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *GetDashboardVersionByUIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dashboards/uid/{uid}/versions/{DashboardVersionID}][%d] getDashboardVersionByUidInternalServerError  %+v", 500, o.Payload)
}
func (o *GetDashboardVersionByUIDInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetDashboardVersionByUIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
