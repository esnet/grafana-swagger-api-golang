// Code generated by go-swagger; DO NOT EDIT.

package datasource_permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// DisablePermissionsReader is a Reader for the DisablePermissions structure.
type DisablePermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DisablePermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDisablePermissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDisablePermissionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDisablePermissionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDisablePermissionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDisablePermissionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDisablePermissionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDisablePermissionsOK creates a DisablePermissionsOK with default headers values
func NewDisablePermissionsOK() *DisablePermissionsOK {
	return &DisablePermissionsOK{}
}

/*
DisablePermissionsOK describes a response with status code 200, with default header values.

(empty)
*/
type DisablePermissionsOK struct {
	Payload *models.DisablePermissionsOKBody
}

func (o *DisablePermissionsOK) Error() string {
	return fmt.Sprintf("[POST /datasources/{datasourceId}/disable-permissions][%d] disablePermissionsOK  %+v", 200, o.Payload)
}
func (o *DisablePermissionsOK) GetPayload() *models.DisablePermissionsOKBody {
	return o.Payload
}

func (o *DisablePermissionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DisablePermissionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisablePermissionsBadRequest creates a DisablePermissionsBadRequest with default headers values
func NewDisablePermissionsBadRequest() *DisablePermissionsBadRequest {
	return &DisablePermissionsBadRequest{}
}

/*
DisablePermissionsBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type DisablePermissionsBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *DisablePermissionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /datasources/{datasourceId}/disable-permissions][%d] disablePermissionsBadRequest  %+v", 400, o.Payload)
}
func (o *DisablePermissionsBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DisablePermissionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisablePermissionsUnauthorized creates a DisablePermissionsUnauthorized with default headers values
func NewDisablePermissionsUnauthorized() *DisablePermissionsUnauthorized {
	return &DisablePermissionsUnauthorized{}
}

/*
DisablePermissionsUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type DisablePermissionsUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *DisablePermissionsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /datasources/{datasourceId}/disable-permissions][%d] disablePermissionsUnauthorized  %+v", 401, o.Payload)
}
func (o *DisablePermissionsUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DisablePermissionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisablePermissionsForbidden creates a DisablePermissionsForbidden with default headers values
func NewDisablePermissionsForbidden() *DisablePermissionsForbidden {
	return &DisablePermissionsForbidden{}
}

/*
DisablePermissionsForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type DisablePermissionsForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *DisablePermissionsForbidden) Error() string {
	return fmt.Sprintf("[POST /datasources/{datasourceId}/disable-permissions][%d] disablePermissionsForbidden  %+v", 403, o.Payload)
}
func (o *DisablePermissionsForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DisablePermissionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisablePermissionsNotFound creates a DisablePermissionsNotFound with default headers values
func NewDisablePermissionsNotFound() *DisablePermissionsNotFound {
	return &DisablePermissionsNotFound{}
}

/*
DisablePermissionsNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type DisablePermissionsNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *DisablePermissionsNotFound) Error() string {
	return fmt.Sprintf("[POST /datasources/{datasourceId}/disable-permissions][%d] disablePermissionsNotFound  %+v", 404, o.Payload)
}
func (o *DisablePermissionsNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DisablePermissionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisablePermissionsInternalServerError creates a DisablePermissionsInternalServerError with default headers values
func NewDisablePermissionsInternalServerError() *DisablePermissionsInternalServerError {
	return &DisablePermissionsInternalServerError{}
}

/*
DisablePermissionsInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type DisablePermissionsInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *DisablePermissionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /datasources/{datasourceId}/disable-permissions][%d] disablePermissionsInternalServerError  %+v", 500, o.Payload)
}
func (o *DisablePermissionsInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DisablePermissionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
