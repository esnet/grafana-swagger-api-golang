// Code generated by go-swagger; DO NOT EDIT.

package datasource_permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// EnablePermissionsReader is a Reader for the EnablePermissions structure.
type EnablePermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnablePermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnablePermissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnablePermissionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEnablePermissionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEnablePermissionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEnablePermissionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEnablePermissionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEnablePermissionsOK creates a EnablePermissionsOK with default headers values
func NewEnablePermissionsOK() *EnablePermissionsOK {
	return &EnablePermissionsOK{}
}

/*
EnablePermissionsOK describes a response with status code 200, with default header values.

(empty)
*/
type EnablePermissionsOK struct {
	Payload *models.EnablePermissionsOKBody
}

func (o *EnablePermissionsOK) Error() string {
	return fmt.Sprintf("[POST /datasources/{datasourceId}/enable-permissions][%d] enablePermissionsOK  %+v", 200, o.Payload)
}
func (o *EnablePermissionsOK) GetPayload() *models.EnablePermissionsOKBody {
	return o.Payload
}

func (o *EnablePermissionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EnablePermissionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnablePermissionsBadRequest creates a EnablePermissionsBadRequest with default headers values
func NewEnablePermissionsBadRequest() *EnablePermissionsBadRequest {
	return &EnablePermissionsBadRequest{}
}

/*
EnablePermissionsBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type EnablePermissionsBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *EnablePermissionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /datasources/{datasourceId}/enable-permissions][%d] enablePermissionsBadRequest  %+v", 400, o.Payload)
}
func (o *EnablePermissionsBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *EnablePermissionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnablePermissionsUnauthorized creates a EnablePermissionsUnauthorized with default headers values
func NewEnablePermissionsUnauthorized() *EnablePermissionsUnauthorized {
	return &EnablePermissionsUnauthorized{}
}

/*
EnablePermissionsUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type EnablePermissionsUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *EnablePermissionsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /datasources/{datasourceId}/enable-permissions][%d] enablePermissionsUnauthorized  %+v", 401, o.Payload)
}
func (o *EnablePermissionsUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *EnablePermissionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnablePermissionsForbidden creates a EnablePermissionsForbidden with default headers values
func NewEnablePermissionsForbidden() *EnablePermissionsForbidden {
	return &EnablePermissionsForbidden{}
}

/*
EnablePermissionsForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type EnablePermissionsForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *EnablePermissionsForbidden) Error() string {
	return fmt.Sprintf("[POST /datasources/{datasourceId}/enable-permissions][%d] enablePermissionsForbidden  %+v", 403, o.Payload)
}
func (o *EnablePermissionsForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *EnablePermissionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnablePermissionsNotFound creates a EnablePermissionsNotFound with default headers values
func NewEnablePermissionsNotFound() *EnablePermissionsNotFound {
	return &EnablePermissionsNotFound{}
}

/*
EnablePermissionsNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type EnablePermissionsNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *EnablePermissionsNotFound) Error() string {
	return fmt.Sprintf("[POST /datasources/{datasourceId}/enable-permissions][%d] enablePermissionsNotFound  %+v", 404, o.Payload)
}
func (o *EnablePermissionsNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *EnablePermissionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnablePermissionsInternalServerError creates a EnablePermissionsInternalServerError with default headers values
func NewEnablePermissionsInternalServerError() *EnablePermissionsInternalServerError {
	return &EnablePermissionsInternalServerError{}
}

/*
EnablePermissionsInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type EnablePermissionsInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *EnablePermissionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /datasources/{datasourceId}/enable-permissions][%d] enablePermissionsInternalServerError  %+v", 500, o.Payload)
}
func (o *EnablePermissionsInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *EnablePermissionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
