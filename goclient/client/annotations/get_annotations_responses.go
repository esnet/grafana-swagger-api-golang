// Code generated by go-swagger; DO NOT EDIT.

package annotations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// GetAnnotationsReader is a Reader for the GetAnnotations structure.
type GetAnnotationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAnnotationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAnnotationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAnnotationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAnnotationsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAnnotationsOK creates a GetAnnotationsOK with default headers values
func NewGetAnnotationsOK() *GetAnnotationsOK {
	return &GetAnnotationsOK{}
}

/*
GetAnnotationsOK describes a response with status code 200, with default header values.

(empty)
*/
type GetAnnotationsOK struct {
	Payload []*models.ItemDTO
}

func (o *GetAnnotationsOK) Error() string {
	return fmt.Sprintf("[GET /annotations][%d] getAnnotationsOK  %+v", 200, o.Payload)
}
func (o *GetAnnotationsOK) GetPayload() []*models.ItemDTO {
	return o.Payload
}

func (o *GetAnnotationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnnotationsUnauthorized creates a GetAnnotationsUnauthorized with default headers values
func NewGetAnnotationsUnauthorized() *GetAnnotationsUnauthorized {
	return &GetAnnotationsUnauthorized{}
}

/*
GetAnnotationsUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type GetAnnotationsUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *GetAnnotationsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /annotations][%d] getAnnotationsUnauthorized  %+v", 401, o.Payload)
}
func (o *GetAnnotationsUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetAnnotationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAnnotationsInternalServerError creates a GetAnnotationsInternalServerError with default headers values
func NewGetAnnotationsInternalServerError() *GetAnnotationsInternalServerError {
	return &GetAnnotationsInternalServerError{}
}

/*
GetAnnotationsInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type GetAnnotationsInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *GetAnnotationsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /annotations][%d] getAnnotationsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetAnnotationsInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetAnnotationsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
