// Code generated by go-swagger; DO NOT EDIT.

package annotations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// DeleteAnnotationByIDReader is a Reader for the DeleteAnnotationByID structure.
type DeleteAnnotationByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAnnotationByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteAnnotationByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteAnnotationByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteAnnotationByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteAnnotationByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteAnnotationByIDOK creates a DeleteAnnotationByIDOK with default headers values
func NewDeleteAnnotationByIDOK() *DeleteAnnotationByIDOK {
	return &DeleteAnnotationByIDOK{}
}

/*
DeleteAnnotationByIDOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type DeleteAnnotationByIDOK struct {
	Payload *models.SuccessResponseBody
}

func (o *DeleteAnnotationByIDOK) Error() string {
	return fmt.Sprintf("[DELETE /annotations/{annotation_id}][%d] deleteAnnotationByIdOK  %+v", 200, o.Payload)
}
func (o *DeleteAnnotationByIDOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *DeleteAnnotationByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAnnotationByIDUnauthorized creates a DeleteAnnotationByIDUnauthorized with default headers values
func NewDeleteAnnotationByIDUnauthorized() *DeleteAnnotationByIDUnauthorized {
	return &DeleteAnnotationByIDUnauthorized{}
}

/*
DeleteAnnotationByIDUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type DeleteAnnotationByIDUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteAnnotationByIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /annotations/{annotation_id}][%d] deleteAnnotationByIdUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteAnnotationByIDUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteAnnotationByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAnnotationByIDForbidden creates a DeleteAnnotationByIDForbidden with default headers values
func NewDeleteAnnotationByIDForbidden() *DeleteAnnotationByIDForbidden {
	return &DeleteAnnotationByIDForbidden{}
}

/*
DeleteAnnotationByIDForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type DeleteAnnotationByIDForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteAnnotationByIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /annotations/{annotation_id}][%d] deleteAnnotationByIdForbidden  %+v", 403, o.Payload)
}
func (o *DeleteAnnotationByIDForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteAnnotationByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAnnotationByIDInternalServerError creates a DeleteAnnotationByIDInternalServerError with default headers values
func NewDeleteAnnotationByIDInternalServerError() *DeleteAnnotationByIDInternalServerError {
	return &DeleteAnnotationByIDInternalServerError{}
}

/*
DeleteAnnotationByIDInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type DeleteAnnotationByIDInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteAnnotationByIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /annotations/{annotation_id}][%d] deleteAnnotationByIdInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteAnnotationByIDInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteAnnotationByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
