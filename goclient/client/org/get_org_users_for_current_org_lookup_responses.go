// Code generated by go-swagger; DO NOT EDIT.

package org

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// GetOrgUsersForCurrentOrgLookupReader is a Reader for the GetOrgUsersForCurrentOrgLookup structure.
type GetOrgUsersForCurrentOrgLookupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrgUsersForCurrentOrgLookupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrgUsersForCurrentOrgLookupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOrgUsersForCurrentOrgLookupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrgUsersForCurrentOrgLookupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOrgUsersForCurrentOrgLookupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrgUsersForCurrentOrgLookupOK creates a GetOrgUsersForCurrentOrgLookupOK with default headers values
func NewGetOrgUsersForCurrentOrgLookupOK() *GetOrgUsersForCurrentOrgLookupOK {
	return &GetOrgUsersForCurrentOrgLookupOK{}
}

/*
GetOrgUsersForCurrentOrgLookupOK describes a response with status code 200, with default header values.

(empty)
*/
type GetOrgUsersForCurrentOrgLookupOK struct {
	Payload []*models.UserLookupDTO
}

func (o *GetOrgUsersForCurrentOrgLookupOK) Error() string {
	return fmt.Sprintf("[GET /org/users/lookup][%d] getOrgUsersForCurrentOrgLookupOK  %+v", 200, o.Payload)
}
func (o *GetOrgUsersForCurrentOrgLookupOK) GetPayload() []*models.UserLookupDTO {
	return o.Payload
}

func (o *GetOrgUsersForCurrentOrgLookupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrgUsersForCurrentOrgLookupUnauthorized creates a GetOrgUsersForCurrentOrgLookupUnauthorized with default headers values
func NewGetOrgUsersForCurrentOrgLookupUnauthorized() *GetOrgUsersForCurrentOrgLookupUnauthorized {
	return &GetOrgUsersForCurrentOrgLookupUnauthorized{}
}

/*
GetOrgUsersForCurrentOrgLookupUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type GetOrgUsersForCurrentOrgLookupUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *GetOrgUsersForCurrentOrgLookupUnauthorized) Error() string {
	return fmt.Sprintf("[GET /org/users/lookup][%d] getOrgUsersForCurrentOrgLookupUnauthorized  %+v", 401, o.Payload)
}
func (o *GetOrgUsersForCurrentOrgLookupUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetOrgUsersForCurrentOrgLookupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrgUsersForCurrentOrgLookupForbidden creates a GetOrgUsersForCurrentOrgLookupForbidden with default headers values
func NewGetOrgUsersForCurrentOrgLookupForbidden() *GetOrgUsersForCurrentOrgLookupForbidden {
	return &GetOrgUsersForCurrentOrgLookupForbidden{}
}

/*
GetOrgUsersForCurrentOrgLookupForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type GetOrgUsersForCurrentOrgLookupForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *GetOrgUsersForCurrentOrgLookupForbidden) Error() string {
	return fmt.Sprintf("[GET /org/users/lookup][%d] getOrgUsersForCurrentOrgLookupForbidden  %+v", 403, o.Payload)
}
func (o *GetOrgUsersForCurrentOrgLookupForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetOrgUsersForCurrentOrgLookupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrgUsersForCurrentOrgLookupInternalServerError creates a GetOrgUsersForCurrentOrgLookupInternalServerError with default headers values
func NewGetOrgUsersForCurrentOrgLookupInternalServerError() *GetOrgUsersForCurrentOrgLookupInternalServerError {
	return &GetOrgUsersForCurrentOrgLookupInternalServerError{}
}

/*
GetOrgUsersForCurrentOrgLookupInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type GetOrgUsersForCurrentOrgLookupInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *GetOrgUsersForCurrentOrgLookupInternalServerError) Error() string {
	return fmt.Sprintf("[GET /org/users/lookup][%d] getOrgUsersForCurrentOrgLookupInternalServerError  %+v", 500, o.Payload)
}
func (o *GetOrgUsersForCurrentOrgLookupInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetOrgUsersForCurrentOrgLookupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
