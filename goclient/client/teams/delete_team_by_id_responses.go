// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// DeleteTeamByIDReader is a Reader for the DeleteTeamByID structure.
type DeleteTeamByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteTeamByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteTeamByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteTeamByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteTeamByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteTeamByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteTeamByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteTeamByIDOK creates a DeleteTeamByIDOK with default headers values
func NewDeleteTeamByIDOK() *DeleteTeamByIDOK {
	return &DeleteTeamByIDOK{}
}

/*
DeleteTeamByIDOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type DeleteTeamByIDOK struct {
	Payload *models.SuccessResponseBody
}

func (o *DeleteTeamByIDOK) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}][%d] deleteTeamByIdOK  %+v", 200, o.Payload)
}
func (o *DeleteTeamByIDOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *DeleteTeamByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamByIDUnauthorized creates a DeleteTeamByIDUnauthorized with default headers values
func NewDeleteTeamByIDUnauthorized() *DeleteTeamByIDUnauthorized {
	return &DeleteTeamByIDUnauthorized{}
}

/*
DeleteTeamByIDUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type DeleteTeamByIDUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteTeamByIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}][%d] deleteTeamByIdUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteTeamByIDUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteTeamByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamByIDForbidden creates a DeleteTeamByIDForbidden with default headers values
func NewDeleteTeamByIDForbidden() *DeleteTeamByIDForbidden {
	return &DeleteTeamByIDForbidden{}
}

/*
DeleteTeamByIDForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type DeleteTeamByIDForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteTeamByIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}][%d] deleteTeamByIdForbidden  %+v", 403, o.Payload)
}
func (o *DeleteTeamByIDForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteTeamByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamByIDNotFound creates a DeleteTeamByIDNotFound with default headers values
func NewDeleteTeamByIDNotFound() *DeleteTeamByIDNotFound {
	return &DeleteTeamByIDNotFound{}
}

/*
DeleteTeamByIDNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type DeleteTeamByIDNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteTeamByIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}][%d] deleteTeamByIdNotFound  %+v", 404, o.Payload)
}
func (o *DeleteTeamByIDNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteTeamByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteTeamByIDInternalServerError creates a DeleteTeamByIDInternalServerError with default headers values
func NewDeleteTeamByIDInternalServerError() *DeleteTeamByIDInternalServerError {
	return &DeleteTeamByIDInternalServerError{}
}

/*
DeleteTeamByIDInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type DeleteTeamByIDInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteTeamByIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /teams/{team_id}][%d] deleteTeamByIdInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteTeamByIDInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteTeamByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
