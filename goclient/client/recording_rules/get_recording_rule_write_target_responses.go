// Code generated by go-swagger; DO NOT EDIT.

package recording_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// GetRecordingRuleWriteTargetReader is a Reader for the GetRecordingRuleWriteTarget structure.
type GetRecordingRuleWriteTargetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRecordingRuleWriteTargetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRecordingRuleWriteTargetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRecordingRuleWriteTargetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRecordingRuleWriteTargetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRecordingRuleWriteTargetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRecordingRuleWriteTargetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRecordingRuleWriteTargetOK creates a GetRecordingRuleWriteTargetOK with default headers values
func NewGetRecordingRuleWriteTargetOK() *GetRecordingRuleWriteTargetOK {
	return &GetRecordingRuleWriteTargetOK{}
}

/*
GetRecordingRuleWriteTargetOK describes a response with status code 200, with default header values.

(empty)
*/
type GetRecordingRuleWriteTargetOK struct {
	Payload *models.PrometheusRemoteWriteTargetJSON
}

func (o *GetRecordingRuleWriteTargetOK) Error() string {
	return fmt.Sprintf("[GET /recording-rules/writer][%d] getRecordingRuleWriteTargetOK  %+v", 200, o.Payload)
}
func (o *GetRecordingRuleWriteTargetOK) GetPayload() *models.PrometheusRemoteWriteTargetJSON {
	return o.Payload
}

func (o *GetRecordingRuleWriteTargetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PrometheusRemoteWriteTargetJSON)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingRuleWriteTargetUnauthorized creates a GetRecordingRuleWriteTargetUnauthorized with default headers values
func NewGetRecordingRuleWriteTargetUnauthorized() *GetRecordingRuleWriteTargetUnauthorized {
	return &GetRecordingRuleWriteTargetUnauthorized{}
}

/*
GetRecordingRuleWriteTargetUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type GetRecordingRuleWriteTargetUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *GetRecordingRuleWriteTargetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /recording-rules/writer][%d] getRecordingRuleWriteTargetUnauthorized  %+v", 401, o.Payload)
}
func (o *GetRecordingRuleWriteTargetUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetRecordingRuleWriteTargetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingRuleWriteTargetForbidden creates a GetRecordingRuleWriteTargetForbidden with default headers values
func NewGetRecordingRuleWriteTargetForbidden() *GetRecordingRuleWriteTargetForbidden {
	return &GetRecordingRuleWriteTargetForbidden{}
}

/*
GetRecordingRuleWriteTargetForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type GetRecordingRuleWriteTargetForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *GetRecordingRuleWriteTargetForbidden) Error() string {
	return fmt.Sprintf("[GET /recording-rules/writer][%d] getRecordingRuleWriteTargetForbidden  %+v", 403, o.Payload)
}
func (o *GetRecordingRuleWriteTargetForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetRecordingRuleWriteTargetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingRuleWriteTargetNotFound creates a GetRecordingRuleWriteTargetNotFound with default headers values
func NewGetRecordingRuleWriteTargetNotFound() *GetRecordingRuleWriteTargetNotFound {
	return &GetRecordingRuleWriteTargetNotFound{}
}

/*
GetRecordingRuleWriteTargetNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type GetRecordingRuleWriteTargetNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *GetRecordingRuleWriteTargetNotFound) Error() string {
	return fmt.Sprintf("[GET /recording-rules/writer][%d] getRecordingRuleWriteTargetNotFound  %+v", 404, o.Payload)
}
func (o *GetRecordingRuleWriteTargetNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetRecordingRuleWriteTargetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecordingRuleWriteTargetInternalServerError creates a GetRecordingRuleWriteTargetInternalServerError with default headers values
func NewGetRecordingRuleWriteTargetInternalServerError() *GetRecordingRuleWriteTargetInternalServerError {
	return &GetRecordingRuleWriteTargetInternalServerError{}
}

/*
GetRecordingRuleWriteTargetInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type GetRecordingRuleWriteTargetInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *GetRecordingRuleWriteTargetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /recording-rules/writer][%d] getRecordingRuleWriteTargetInternalServerError  %+v", 500, o.Payload)
}
func (o *GetRecordingRuleWriteTargetInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *GetRecordingRuleWriteTargetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
