// Code generated by go-swagger; DO NOT EDIT.

package recording_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// DeleteRecordingRuleWriteTargetReader is a Reader for the DeleteRecordingRuleWriteTarget structure.
type DeleteRecordingRuleWriteTargetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRecordingRuleWriteTargetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteRecordingRuleWriteTargetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteRecordingRuleWriteTargetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteRecordingRuleWriteTargetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRecordingRuleWriteTargetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteRecordingRuleWriteTargetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteRecordingRuleWriteTargetOK creates a DeleteRecordingRuleWriteTargetOK with default headers values
func NewDeleteRecordingRuleWriteTargetOK() *DeleteRecordingRuleWriteTargetOK {
	return &DeleteRecordingRuleWriteTargetOK{}
}

/*
DeleteRecordingRuleWriteTargetOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type DeleteRecordingRuleWriteTargetOK struct {
	Payload *models.SuccessResponseBody
}

func (o *DeleteRecordingRuleWriteTargetOK) Error() string {
	return fmt.Sprintf("[DELETE /recording-rules/writer][%d] deleteRecordingRuleWriteTargetOK  %+v", 200, o.Payload)
}
func (o *DeleteRecordingRuleWriteTargetOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *DeleteRecordingRuleWriteTargetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingRuleWriteTargetUnauthorized creates a DeleteRecordingRuleWriteTargetUnauthorized with default headers values
func NewDeleteRecordingRuleWriteTargetUnauthorized() *DeleteRecordingRuleWriteTargetUnauthorized {
	return &DeleteRecordingRuleWriteTargetUnauthorized{}
}

/*
DeleteRecordingRuleWriteTargetUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type DeleteRecordingRuleWriteTargetUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteRecordingRuleWriteTargetUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /recording-rules/writer][%d] deleteRecordingRuleWriteTargetUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteRecordingRuleWriteTargetUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteRecordingRuleWriteTargetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingRuleWriteTargetForbidden creates a DeleteRecordingRuleWriteTargetForbidden with default headers values
func NewDeleteRecordingRuleWriteTargetForbidden() *DeleteRecordingRuleWriteTargetForbidden {
	return &DeleteRecordingRuleWriteTargetForbidden{}
}

/*
DeleteRecordingRuleWriteTargetForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type DeleteRecordingRuleWriteTargetForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteRecordingRuleWriteTargetForbidden) Error() string {
	return fmt.Sprintf("[DELETE /recording-rules/writer][%d] deleteRecordingRuleWriteTargetForbidden  %+v", 403, o.Payload)
}
func (o *DeleteRecordingRuleWriteTargetForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteRecordingRuleWriteTargetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingRuleWriteTargetNotFound creates a DeleteRecordingRuleWriteTargetNotFound with default headers values
func NewDeleteRecordingRuleWriteTargetNotFound() *DeleteRecordingRuleWriteTargetNotFound {
	return &DeleteRecordingRuleWriteTargetNotFound{}
}

/*
DeleteRecordingRuleWriteTargetNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type DeleteRecordingRuleWriteTargetNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteRecordingRuleWriteTargetNotFound) Error() string {
	return fmt.Sprintf("[DELETE /recording-rules/writer][%d] deleteRecordingRuleWriteTargetNotFound  %+v", 404, o.Payload)
}
func (o *DeleteRecordingRuleWriteTargetNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteRecordingRuleWriteTargetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRecordingRuleWriteTargetInternalServerError creates a DeleteRecordingRuleWriteTargetInternalServerError with default headers values
func NewDeleteRecordingRuleWriteTargetInternalServerError() *DeleteRecordingRuleWriteTargetInternalServerError {
	return &DeleteRecordingRuleWriteTargetInternalServerError{}
}

/*
DeleteRecordingRuleWriteTargetInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type DeleteRecordingRuleWriteTargetInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteRecordingRuleWriteTargetInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /recording-rules/writer][%d] deleteRecordingRuleWriteTargetInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteRecordingRuleWriteTargetInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteRecordingRuleWriteTargetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
