// Code generated by go-swagger; DO NOT EDIT.

package access_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// SetRoleAssignmentsReader is a Reader for the SetRoleAssignments structure.
type SetRoleAssignmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetRoleAssignmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetRoleAssignmentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewSetRoleAssignmentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetRoleAssignmentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSetRoleAssignmentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSetRoleAssignmentsOK creates a SetRoleAssignmentsOK with default headers values
func NewSetRoleAssignmentsOK() *SetRoleAssignmentsOK {
	return &SetRoleAssignmentsOK{}
}

/*
SetRoleAssignmentsOK describes a response with status code 200, with default header values.

(empty)
*/
type SetRoleAssignmentsOK struct {
	Payload *models.RoleAssignmentsDTO
}

func (o *SetRoleAssignmentsOK) Error() string {
	return fmt.Sprintf("[PUT /access-control/roles/{roleUID}/assignments][%d] setRoleAssignmentsOK  %+v", 200, o.Payload)
}
func (o *SetRoleAssignmentsOK) GetPayload() *models.RoleAssignmentsDTO {
	return o.Payload
}

func (o *SetRoleAssignmentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoleAssignmentsDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetRoleAssignmentsForbidden creates a SetRoleAssignmentsForbidden with default headers values
func NewSetRoleAssignmentsForbidden() *SetRoleAssignmentsForbidden {
	return &SetRoleAssignmentsForbidden{}
}

/*
SetRoleAssignmentsForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type SetRoleAssignmentsForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *SetRoleAssignmentsForbidden) Error() string {
	return fmt.Sprintf("[PUT /access-control/roles/{roleUID}/assignments][%d] setRoleAssignmentsForbidden  %+v", 403, o.Payload)
}
func (o *SetRoleAssignmentsForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *SetRoleAssignmentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetRoleAssignmentsNotFound creates a SetRoleAssignmentsNotFound with default headers values
func NewSetRoleAssignmentsNotFound() *SetRoleAssignmentsNotFound {
	return &SetRoleAssignmentsNotFound{}
}

/*
SetRoleAssignmentsNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type SetRoleAssignmentsNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *SetRoleAssignmentsNotFound) Error() string {
	return fmt.Sprintf("[PUT /access-control/roles/{roleUID}/assignments][%d] setRoleAssignmentsNotFound  %+v", 404, o.Payload)
}
func (o *SetRoleAssignmentsNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *SetRoleAssignmentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetRoleAssignmentsInternalServerError creates a SetRoleAssignmentsInternalServerError with default headers values
func NewSetRoleAssignmentsInternalServerError() *SetRoleAssignmentsInternalServerError {
	return &SetRoleAssignmentsInternalServerError{}
}

/*
SetRoleAssignmentsInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type SetRoleAssignmentsInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *SetRoleAssignmentsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /access-control/roles/{roleUID}/assignments][%d] setRoleAssignmentsInternalServerError  %+v", 500, o.Payload)
}
func (o *SetRoleAssignmentsInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *SetRoleAssignmentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
