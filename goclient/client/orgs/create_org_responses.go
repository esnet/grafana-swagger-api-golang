// Code generated by go-swagger; DO NOT EDIT.

package orgs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// CreateOrgReader is a Reader for the CreateOrg structure.
type CreateOrgReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOrgReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateOrgOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateOrgUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateOrgForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateOrgConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateOrgInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateOrgOK creates a CreateOrgOK with default headers values
func NewCreateOrgOK() *CreateOrgOK {
	return &CreateOrgOK{}
}

/*
CreateOrgOK describes a response with status code 200, with default header values.

(empty)
*/
type CreateOrgOK struct {
	Payload *models.CreateOrgOKBody
}

func (o *CreateOrgOK) Error() string {
	return fmt.Sprintf("[POST /orgs][%d] createOrgOK  %+v", 200, o.Payload)
}
func (o *CreateOrgOK) GetPayload() *models.CreateOrgOKBody {
	return o.Payload
}

func (o *CreateOrgOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateOrgOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrgUnauthorized creates a CreateOrgUnauthorized with default headers values
func NewCreateOrgUnauthorized() *CreateOrgUnauthorized {
	return &CreateOrgUnauthorized{}
}

/*
CreateOrgUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type CreateOrgUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *CreateOrgUnauthorized) Error() string {
	return fmt.Sprintf("[POST /orgs][%d] createOrgUnauthorized  %+v", 401, o.Payload)
}
func (o *CreateOrgUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *CreateOrgUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrgForbidden creates a CreateOrgForbidden with default headers values
func NewCreateOrgForbidden() *CreateOrgForbidden {
	return &CreateOrgForbidden{}
}

/*
CreateOrgForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type CreateOrgForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *CreateOrgForbidden) Error() string {
	return fmt.Sprintf("[POST /orgs][%d] createOrgForbidden  %+v", 403, o.Payload)
}
func (o *CreateOrgForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *CreateOrgForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrgConflict creates a CreateOrgConflict with default headers values
func NewCreateOrgConflict() *CreateOrgConflict {
	return &CreateOrgConflict{}
}

/*
CreateOrgConflict describes a response with status code 409, with default header values.

ConflictError
*/
type CreateOrgConflict struct {
	Payload *models.ErrorResponseBody
}

func (o *CreateOrgConflict) Error() string {
	return fmt.Sprintf("[POST /orgs][%d] createOrgConflict  %+v", 409, o.Payload)
}
func (o *CreateOrgConflict) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *CreateOrgConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrgInternalServerError creates a CreateOrgInternalServerError with default headers values
func NewCreateOrgInternalServerError() *CreateOrgInternalServerError {
	return &CreateOrgInternalServerError{}
}

/*
CreateOrgInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type CreateOrgInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *CreateOrgInternalServerError) Error() string {
	return fmt.Sprintf("[POST /orgs][%d] createOrgInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateOrgInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *CreateOrgInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
