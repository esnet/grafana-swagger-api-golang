// Code generated by go-swagger; DO NOT EDIT.

package orgs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/esnet/grafana-swagger-api-golang/goclient/models"
)

// DeleteOrgByIDReader is a Reader for the DeleteOrgByID structure.
type DeleteOrgByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteOrgByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteOrgByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteOrgByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteOrgByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteOrgByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteOrgByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteOrgByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteOrgByIDOK creates a DeleteOrgByIDOK with default headers values
func NewDeleteOrgByIDOK() *DeleteOrgByIDOK {
	return &DeleteOrgByIDOK{}
}

/*
DeleteOrgByIDOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type DeleteOrgByIDOK struct {
	Payload *models.SuccessResponseBody
}

func (o *DeleteOrgByIDOK) Error() string {
	return fmt.Sprintf("[DELETE /orgs/{org_id}][%d] deleteOrgByIdOK  %+v", 200, o.Payload)
}
func (o *DeleteOrgByIDOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *DeleteOrgByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteOrgByIDBadRequest creates a DeleteOrgByIDBadRequest with default headers values
func NewDeleteOrgByIDBadRequest() *DeleteOrgByIDBadRequest {
	return &DeleteOrgByIDBadRequest{}
}

/*
DeleteOrgByIDBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type DeleteOrgByIDBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteOrgByIDBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /orgs/{org_id}][%d] deleteOrgByIdBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteOrgByIDBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteOrgByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteOrgByIDUnauthorized creates a DeleteOrgByIDUnauthorized with default headers values
func NewDeleteOrgByIDUnauthorized() *DeleteOrgByIDUnauthorized {
	return &DeleteOrgByIDUnauthorized{}
}

/*
DeleteOrgByIDUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type DeleteOrgByIDUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteOrgByIDUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /orgs/{org_id}][%d] deleteOrgByIdUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteOrgByIDUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteOrgByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteOrgByIDForbidden creates a DeleteOrgByIDForbidden with default headers values
func NewDeleteOrgByIDForbidden() *DeleteOrgByIDForbidden {
	return &DeleteOrgByIDForbidden{}
}

/*
DeleteOrgByIDForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type DeleteOrgByIDForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteOrgByIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /orgs/{org_id}][%d] deleteOrgByIdForbidden  %+v", 403, o.Payload)
}
func (o *DeleteOrgByIDForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteOrgByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteOrgByIDNotFound creates a DeleteOrgByIDNotFound with default headers values
func NewDeleteOrgByIDNotFound() *DeleteOrgByIDNotFound {
	return &DeleteOrgByIDNotFound{}
}

/*
DeleteOrgByIDNotFound describes a response with status code 404, with default header values.

NotFoundError is returned when the requested resource was not found.
*/
type DeleteOrgByIDNotFound struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteOrgByIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /orgs/{org_id}][%d] deleteOrgByIdNotFound  %+v", 404, o.Payload)
}
func (o *DeleteOrgByIDNotFound) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteOrgByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteOrgByIDInternalServerError creates a DeleteOrgByIDInternalServerError with default headers values
func NewDeleteOrgByIDInternalServerError() *DeleteOrgByIDInternalServerError {
	return &DeleteOrgByIDInternalServerError{}
}

/*
DeleteOrgByIDInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type DeleteOrgByIDInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *DeleteOrgByIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /orgs/{org_id}][%d] deleteOrgByIdInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteOrgByIDInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *DeleteOrgByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
