// Code generated by go-swagger; DO NOT EDIT.

package orgs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-api-golang-client/goclient/models"
)

// UpdateOrgReader is a Reader for the UpdateOrg structure.
type UpdateOrgReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateOrgReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOrgOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateOrgBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateOrgUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateOrgForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateOrgInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateOrgOK creates a UpdateOrgOK with default headers values
func NewUpdateOrgOK() *UpdateOrgOK {
	return &UpdateOrgOK{}
}

/*
UpdateOrgOK describes a response with status code 200, with default header values.

An OKResponse is returned if the request was successful.
*/
type UpdateOrgOK struct {
	Payload *models.SuccessResponseBody
}

func (o *UpdateOrgOK) Error() string {
	return fmt.Sprintf("[PUT /orgs/{org_id}][%d] updateOrgOK  %+v", 200, o.Payload)
}
func (o *UpdateOrgOK) GetPayload() *models.SuccessResponseBody {
	return o.Payload
}

func (o *UpdateOrgOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrgBadRequest creates a UpdateOrgBadRequest with default headers values
func NewUpdateOrgBadRequest() *UpdateOrgBadRequest {
	return &UpdateOrgBadRequest{}
}

/*
UpdateOrgBadRequest describes a response with status code 400, with default header values.

BadRequestError is returned when the request is invalid and it cannot be processed.
*/
type UpdateOrgBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateOrgBadRequest) Error() string {
	return fmt.Sprintf("[PUT /orgs/{org_id}][%d] updateOrgBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateOrgBadRequest) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateOrgBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrgUnauthorized creates a UpdateOrgUnauthorized with default headers values
func NewUpdateOrgUnauthorized() *UpdateOrgUnauthorized {
	return &UpdateOrgUnauthorized{}
}

/*
UpdateOrgUnauthorized describes a response with status code 401, with default header values.

UnauthorizedError is returned when the request is not authenticated.
*/
type UpdateOrgUnauthorized struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateOrgUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /orgs/{org_id}][%d] updateOrgUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateOrgUnauthorized) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateOrgUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrgForbidden creates a UpdateOrgForbidden with default headers values
func NewUpdateOrgForbidden() *UpdateOrgForbidden {
	return &UpdateOrgForbidden{}
}

/*
UpdateOrgForbidden describes a response with status code 403, with default header values.

ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.
*/
type UpdateOrgForbidden struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateOrgForbidden) Error() string {
	return fmt.Sprintf("[PUT /orgs/{org_id}][%d] updateOrgForbidden  %+v", 403, o.Payload)
}
func (o *UpdateOrgForbidden) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateOrgForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrgInternalServerError creates a UpdateOrgInternalServerError with default headers values
func NewUpdateOrgInternalServerError() *UpdateOrgInternalServerError {
	return &UpdateOrgInternalServerError{}
}

/*
UpdateOrgInternalServerError describes a response with status code 500, with default header values.

InternalServerError is a general error indicating something went wrong internally.
*/
type UpdateOrgInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *UpdateOrgInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /orgs/{org_id}][%d] updateOrgInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateOrgInternalServerError) GetPayload() *models.ErrorResponseBody {
	return o.Payload
}

func (o *UpdateOrgInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
